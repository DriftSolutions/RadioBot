//@AUTOHEADER@BEGIN@
/**********************************************************************\
|                          ShoutIRC RadioBot                           |
|           Copyright 2004-2020 Drift Solutions / Indy Sams            |
|        More information available at https://www.shoutirc.com        |
|                                                                      |
|                    This file is part of RadioBot.                    |
|                                                                      |
|   RadioBot is free software: you can redistribute it and/or modify   |
| it under the terms of the GNU General Public License as published by |
|  the Free Software Foundation, either version 3 of the License, or   |
|                 (at your option) any later version.                  |
|                                                                      |
|     RadioBot is distributed in the hope that it will be useful,      |
|    but WITHOUT ANY WARRANTY; without even the implied warranty of    |
|     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the     |
|             GNU General Public License for more details.             |
|                                                                      |
|  You should have received a copy of the GNU General Public License   |
|  along with RadioBot. If not, see <https://www.gnu.org/licenses/>.   |
\**********************************************************************/
//@AUTOHEADER@END@

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autodj.proto

#ifndef PROTOBUF_INCLUDED_autodj_2eproto
#define PROTOBUF_INCLUDED_autodj_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_autodj_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_autodj_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_autodj_2eproto();
class pbQUEUE;
class pbQUEUEDefaultTypeInternal;
extern pbQUEUEDefaultTypeInternal _pbQUEUE_default_instance_;
class pbQUEUE_LIST;
class pbQUEUE_LISTDefaultTypeInternal;
extern pbQUEUE_LISTDefaultTypeInternal _pbQUEUE_LIST_default_instance_;
class pbREQ_INFO;
class pbREQ_INFODefaultTypeInternal;
extern pbREQ_INFODefaultTypeInternal _pbREQ_INFO_default_instance_;
class pbTITLE_DATA;
class pbTITLE_DATADefaultTypeInternal;
extern pbTITLE_DATADefaultTypeInternal _pbTITLE_DATA_default_instance_;
namespace google {
namespace protobuf {
template<> ::pbQUEUE* Arena::CreateMaybeMessage<::pbQUEUE>(Arena*);
template<> ::pbQUEUE_LIST* Arena::CreateMaybeMessage<::pbQUEUE_LIST>(Arena*);
template<> ::pbREQ_INFO* Arena::CreateMaybeMessage<::pbREQ_INFO>(Arena*);
template<> ::pbTITLE_DATA* Arena::CreateMaybeMessage<::pbTITLE_DATA>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class pbTITLE_DATA final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbTITLE_DATA) */ {
 public:
  pbTITLE_DATA();
  virtual ~pbTITLE_DATA();

  pbTITLE_DATA(const pbTITLE_DATA& from);

  inline pbTITLE_DATA& operator=(const pbTITLE_DATA& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  pbTITLE_DATA(pbTITLE_DATA&& from) noexcept
    : pbTITLE_DATA() {
    *this = ::std::move(from);
  }

  inline pbTITLE_DATA& operator=(pbTITLE_DATA&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const pbTITLE_DATA& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pbTITLE_DATA* internal_default_instance() {
    return reinterpret_cast<const pbTITLE_DATA*>(
               &_pbTITLE_DATA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(pbTITLE_DATA* other);
  friend void swap(pbTITLE_DATA& a, pbTITLE_DATA& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pbTITLE_DATA* New() const final {
    return CreateMaybeMessage<pbTITLE_DATA>(nullptr);
  }

  pbTITLE_DATA* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<pbTITLE_DATA>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const pbTITLE_DATA& from);
  void MergeFrom(const pbTITLE_DATA& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pbTITLE_DATA* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string title = 1;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string artist = 2;
  bool has_artist() const;
  void clear_artist();
  static const int kArtistFieldNumber = 2;
  const ::std::string& artist() const;
  void set_artist(const ::std::string& value);
  #if LANG_CXX11
  void set_artist(::std::string&& value);
  #endif
  void set_artist(const char* value);
  void set_artist(const char* value, size_t size);
  ::std::string* mutable_artist();
  ::std::string* release_artist();
  void set_allocated_artist(::std::string* artist);

  // optional string album = 3;
  bool has_album() const;
  void clear_album();
  static const int kAlbumFieldNumber = 3;
  const ::std::string& album() const;
  void set_album(const ::std::string& value);
  #if LANG_CXX11
  void set_album(::std::string&& value);
  #endif
  void set_album(const char* value);
  void set_album(const char* value, size_t size);
  ::std::string* mutable_album();
  ::std::string* release_album();
  void set_allocated_album(::std::string* album);

  // optional string album_artist = 4;
  bool has_album_artist() const;
  void clear_album_artist();
  static const int kAlbumArtistFieldNumber = 4;
  const ::std::string& album_artist() const;
  void set_album_artist(const ::std::string& value);
  #if LANG_CXX11
  void set_album_artist(::std::string&& value);
  #endif
  void set_album_artist(const char* value);
  void set_album_artist(const char* value, size_t size);
  ::std::string* mutable_album_artist();
  ::std::string* release_album_artist();
  void set_allocated_album_artist(::std::string* album_artist);

  // optional string genre = 5;
  bool has_genre() const;
  void clear_genre();
  static const int kGenreFieldNumber = 5;
  const ::std::string& genre() const;
  void set_genre(const ::std::string& value);
  #if LANG_CXX11
  void set_genre(::std::string&& value);
  #endif
  void set_genre(const char* value);
  void set_genre(const char* value, size_t size);
  ::std::string* mutable_genre();
  ::std::string* release_genre();
  void set_allocated_genre(::std::string* genre);

  // optional string url = 6;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 6;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional string comment = 7;
  bool has_comment() const;
  void clear_comment();
  static const int kCommentFieldNumber = 7;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // optional uint32 track_no = 8;
  bool has_track_no() const;
  void clear_track_no();
  static const int kTrackNoFieldNumber = 8;
  ::google::protobuf::uint32 track_no() const;
  void set_track_no(::google::protobuf::uint32 value);

  // optional uint32 year = 9;
  bool has_year() const;
  void clear_year();
  static const int kYearFieldNumber = 9;
  ::google::protobuf::uint32 year() const;
  void set_year(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pbTITLE_DATA)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr artist_;
  ::google::protobuf::internal::ArenaStringPtr album_;
  ::google::protobuf::internal::ArenaStringPtr album_artist_;
  ::google::protobuf::internal::ArenaStringPtr genre_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::google::protobuf::uint32 track_no_;
  ::google::protobuf::uint32 year_;
  friend struct ::TableStruct_autodj_2eproto;
};
// -------------------------------------------------------------------

class pbREQ_INFO final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbREQ_INFO) */ {
 public:
  pbREQ_INFO();
  virtual ~pbREQ_INFO();

  pbREQ_INFO(const pbREQ_INFO& from);

  inline pbREQ_INFO& operator=(const pbREQ_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  pbREQ_INFO(pbREQ_INFO&& from) noexcept
    : pbREQ_INFO() {
    *this = ::std::move(from);
  }

  inline pbREQ_INFO& operator=(pbREQ_INFO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const pbREQ_INFO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pbREQ_INFO* internal_default_instance() {
    return reinterpret_cast<const pbREQ_INFO*>(
               &_pbREQ_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(pbREQ_INFO* other);
  friend void swap(pbREQ_INFO& a, pbREQ_INFO& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pbREQ_INFO* New() const final {
    return CreateMaybeMessage<pbREQ_INFO>(nullptr);
  }

  pbREQ_INFO* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<pbREQ_INFO>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const pbREQ_INFO& from);
  void MergeFrom(const pbREQ_INFO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pbREQ_INFO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string channel = 2;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 2;
  const ::std::string& channel() const;
  void set_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_channel(::std::string&& value);
  #endif
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  ::std::string* mutable_channel();
  ::std::string* release_channel();
  void set_allocated_channel(::std::string* channel);

  // required string nick = 3;
  bool has_nick() const;
  void clear_nick();
  static const int kNickFieldNumber = 3;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);

  // optional int64 playAfter = 4;
  bool has_playafter() const;
  void clear_playafter();
  static const int kPlayAfterFieldNumber = 4;
  ::google::protobuf::int64 playafter() const;
  void set_playafter(::google::protobuf::int64 value);

  // required int32 netno = 1;
  bool has_netno() const;
  void clear_netno();
  static const int kNetnoFieldNumber = 1;
  ::google::protobuf::int32 netno() const;
  void set_netno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pbREQ_INFO)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr channel_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::int64 playafter_;
  ::google::protobuf::int32 netno_;
  friend struct ::TableStruct_autodj_2eproto;
};
// -------------------------------------------------------------------

class pbQUEUE final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbQUEUE) */ {
 public:
  pbQUEUE();
  virtual ~pbQUEUE();

  pbQUEUE(const pbQUEUE& from);

  inline pbQUEUE& operator=(const pbQUEUE& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  pbQUEUE(pbQUEUE&& from) noexcept
    : pbQUEUE() {
    *this = ::std::move(from);
  }

  inline pbQUEUE& operator=(pbQUEUE&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const pbQUEUE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pbQUEUE* internal_default_instance() {
    return reinterpret_cast<const pbQUEUE*>(
               &_pbQUEUE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(pbQUEUE* other);
  friend void swap(pbQUEUE& a, pbQUEUE& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pbQUEUE* New() const final {
    return CreateMaybeMessage<pbQUEUE>(nullptr);
  }

  pbQUEUE* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<pbQUEUE>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const pbQUEUE& from);
  void MergeFrom(const pbQUEUE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pbQUEUE* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string fn = 2;
  bool has_fn() const;
  void clear_fn();
  static const int kFnFieldNumber = 2;
  const ::std::string& fn() const;
  void set_fn(const ::std::string& value);
  #if LANG_CXX11
  void set_fn(::std::string&& value);
  #endif
  void set_fn(const char* value);
  void set_fn(const char* value, size_t size);
  ::std::string* mutable_fn();
  ::std::string* release_fn();
  void set_allocated_fn(::std::string* fn);

  // required string path = 3;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 3;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional .pbTITLE_DATA meta = 9;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 9;
  const ::pbTITLE_DATA& meta() const;
  ::pbTITLE_DATA* release_meta();
  ::pbTITLE_DATA* mutable_meta();
  void set_allocated_meta(::pbTITLE_DATA* meta);

  // optional .pbREQ_INFO isreq = 10;
  bool has_isreq() const;
  void clear_isreq();
  static const int kIsreqFieldNumber = 10;
  const ::pbREQ_INFO& isreq() const;
  ::pbREQ_INFO* release_isreq();
  ::pbREQ_INFO* mutable_isreq();
  void set_allocated_isreq(::pbREQ_INFO* isreq);

  // required uint32 ID = 1;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional uint32 songlen = 6;
  bool has_songlen() const;
  void clear_songlen();
  static const int kSonglenFieldNumber = 6;
  ::google::protobuf::uint32 songlen() const;
  void set_songlen(::google::protobuf::uint32 value);

  // optional int64 mTime = 4;
  bool has_mtime() const;
  void clear_mtime();
  static const int kMTimeFieldNumber = 4;
  ::google::protobuf::int64 mtime() const;
  void set_mtime(::google::protobuf::int64 value);

  // optional int64 LastPlayed = 5;
  bool has_lastplayed() const;
  void clear_lastplayed();
  static const int kLastPlayedFieldNumber = 5;
  ::google::protobuf::int64 lastplayed() const;
  void set_lastplayed(::google::protobuf::int64 value);

  // optional int32 req_count = 7;
  bool has_req_count() const;
  void clear_req_count();
  static const int kReqCountFieldNumber = 7;
  ::google::protobuf::int32 req_count() const;
  void set_req_count(::google::protobuf::int32 value);

  // optional uint32 flags = 8;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 8;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pbQUEUE)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fn_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::pbTITLE_DATA* meta_;
  ::pbREQ_INFO* isreq_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 songlen_;
  ::google::protobuf::int64 mtime_;
  ::google::protobuf::int64 lastplayed_;
  ::google::protobuf::int32 req_count_;
  ::google::protobuf::uint32 flags_;
  friend struct ::TableStruct_autodj_2eproto;
};
// -------------------------------------------------------------------

class pbQUEUE_LIST final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbQUEUE_LIST) */ {
 public:
  pbQUEUE_LIST();
  virtual ~pbQUEUE_LIST();

  pbQUEUE_LIST(const pbQUEUE_LIST& from);

  inline pbQUEUE_LIST& operator=(const pbQUEUE_LIST& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  pbQUEUE_LIST(pbQUEUE_LIST&& from) noexcept
    : pbQUEUE_LIST() {
    *this = ::std::move(from);
  }

  inline pbQUEUE_LIST& operator=(pbQUEUE_LIST&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const pbQUEUE_LIST& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pbQUEUE_LIST* internal_default_instance() {
    return reinterpret_cast<const pbQUEUE_LIST*>(
               &_pbQUEUE_LIST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(pbQUEUE_LIST* other);
  friend void swap(pbQUEUE_LIST& a, pbQUEUE_LIST& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline pbQUEUE_LIST* New() const final {
    return CreateMaybeMessage<pbQUEUE_LIST>(nullptr);
  }

  pbQUEUE_LIST* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<pbQUEUE_LIST>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const pbQUEUE_LIST& from);
  void MergeFrom(const pbQUEUE_LIST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pbQUEUE_LIST* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pbQUEUE list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::pbQUEUE* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::pbQUEUE >*
      mutable_list();
  const ::pbQUEUE& list(int index) const;
  ::pbQUEUE* add_list();
  const ::google::protobuf::RepeatedPtrField< ::pbQUEUE >&
      list() const;

  // @@protoc_insertion_point(class_scope:pbQUEUE_LIST)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pbQUEUE > list_;
  friend struct ::TableStruct_autodj_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// pbTITLE_DATA

// required string title = 1;
inline bool pbTITLE_DATA::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pbTITLE_DATA::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& pbTITLE_DATA::title() const {
  // @@protoc_insertion_point(field_get:pbTITLE_DATA.title)
  return title_.GetNoArena();
}
inline void pbTITLE_DATA::set_title(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbTITLE_DATA.title)
}
#if LANG_CXX11
inline void pbTITLE_DATA::set_title(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbTITLE_DATA.title)
}
#endif
inline void pbTITLE_DATA::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbTITLE_DATA.title)
}
inline void pbTITLE_DATA::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbTITLE_DATA.title)
}
inline ::std::string* pbTITLE_DATA::mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:pbTITLE_DATA.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbTITLE_DATA::release_title() {
  // @@protoc_insertion_point(field_release:pbTITLE_DATA.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return title_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbTITLE_DATA::set_allocated_title(::std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:pbTITLE_DATA.title)
}

// optional string artist = 2;
inline bool pbTITLE_DATA::has_artist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pbTITLE_DATA::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& pbTITLE_DATA::artist() const {
  // @@protoc_insertion_point(field_get:pbTITLE_DATA.artist)
  return artist_.GetNoArena();
}
inline void pbTITLE_DATA::set_artist(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbTITLE_DATA.artist)
}
#if LANG_CXX11
inline void pbTITLE_DATA::set_artist(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbTITLE_DATA.artist)
}
#endif
inline void pbTITLE_DATA::set_artist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbTITLE_DATA.artist)
}
inline void pbTITLE_DATA::set_artist(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbTITLE_DATA.artist)
}
inline ::std::string* pbTITLE_DATA::mutable_artist() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:pbTITLE_DATA.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbTITLE_DATA::release_artist() {
  // @@protoc_insertion_point(field_release:pbTITLE_DATA.artist)
  if (!has_artist()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return artist_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbTITLE_DATA::set_allocated_artist(::std::string* artist) {
  if (artist != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:pbTITLE_DATA.artist)
}

// optional string album = 3;
inline bool pbTITLE_DATA::has_album() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pbTITLE_DATA::clear_album() {
  album_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& pbTITLE_DATA::album() const {
  // @@protoc_insertion_point(field_get:pbTITLE_DATA.album)
  return album_.GetNoArena();
}
inline void pbTITLE_DATA::set_album(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbTITLE_DATA.album)
}
#if LANG_CXX11
inline void pbTITLE_DATA::set_album(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  album_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbTITLE_DATA.album)
}
#endif
inline void pbTITLE_DATA::set_album(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbTITLE_DATA.album)
}
inline void pbTITLE_DATA::set_album(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  album_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbTITLE_DATA.album)
}
inline ::std::string* pbTITLE_DATA::mutable_album() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:pbTITLE_DATA.album)
  return album_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbTITLE_DATA::release_album() {
  // @@protoc_insertion_point(field_release:pbTITLE_DATA.album)
  if (!has_album()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return album_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbTITLE_DATA::set_allocated_album(::std::string* album) {
  if (album != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  album_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album);
  // @@protoc_insertion_point(field_set_allocated:pbTITLE_DATA.album)
}

// optional string album_artist = 4;
inline bool pbTITLE_DATA::has_album_artist() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pbTITLE_DATA::clear_album_artist() {
  album_artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& pbTITLE_DATA::album_artist() const {
  // @@protoc_insertion_point(field_get:pbTITLE_DATA.album_artist)
  return album_artist_.GetNoArena();
}
inline void pbTITLE_DATA::set_album_artist(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  album_artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbTITLE_DATA.album_artist)
}
#if LANG_CXX11
inline void pbTITLE_DATA::set_album_artist(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  album_artist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbTITLE_DATA.album_artist)
}
#endif
inline void pbTITLE_DATA::set_album_artist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  album_artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbTITLE_DATA.album_artist)
}
inline void pbTITLE_DATA::set_album_artist(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  album_artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbTITLE_DATA.album_artist)
}
inline ::std::string* pbTITLE_DATA::mutable_album_artist() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:pbTITLE_DATA.album_artist)
  return album_artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbTITLE_DATA::release_album_artist() {
  // @@protoc_insertion_point(field_release:pbTITLE_DATA.album_artist)
  if (!has_album_artist()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return album_artist_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbTITLE_DATA::set_allocated_album_artist(::std::string* album_artist) {
  if (album_artist != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  album_artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), album_artist);
  // @@protoc_insertion_point(field_set_allocated:pbTITLE_DATA.album_artist)
}

// optional string genre = 5;
inline bool pbTITLE_DATA::has_genre() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pbTITLE_DATA::clear_genre() {
  genre_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::std::string& pbTITLE_DATA::genre() const {
  // @@protoc_insertion_point(field_get:pbTITLE_DATA.genre)
  return genre_.GetNoArena();
}
inline void pbTITLE_DATA::set_genre(const ::std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbTITLE_DATA.genre)
}
#if LANG_CXX11
inline void pbTITLE_DATA::set_genre(::std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  genre_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbTITLE_DATA.genre)
}
#endif
inline void pbTITLE_DATA::set_genre(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbTITLE_DATA.genre)
}
inline void pbTITLE_DATA::set_genre(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbTITLE_DATA.genre)
}
inline ::std::string* pbTITLE_DATA::mutable_genre() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:pbTITLE_DATA.genre)
  return genre_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbTITLE_DATA::release_genre() {
  // @@protoc_insertion_point(field_release:pbTITLE_DATA.genre)
  if (!has_genre()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return genre_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbTITLE_DATA::set_allocated_genre(::std::string* genre) {
  if (genre != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  genre_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), genre);
  // @@protoc_insertion_point(field_set_allocated:pbTITLE_DATA.genre)
}

// optional string url = 6;
inline bool pbTITLE_DATA::has_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pbTITLE_DATA::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::std::string& pbTITLE_DATA::url() const {
  // @@protoc_insertion_point(field_get:pbTITLE_DATA.url)
  return url_.GetNoArena();
}
inline void pbTITLE_DATA::set_url(const ::std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbTITLE_DATA.url)
}
#if LANG_CXX11
inline void pbTITLE_DATA::set_url(::std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbTITLE_DATA.url)
}
#endif
inline void pbTITLE_DATA::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbTITLE_DATA.url)
}
inline void pbTITLE_DATA::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbTITLE_DATA.url)
}
inline ::std::string* pbTITLE_DATA::mutable_url() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:pbTITLE_DATA.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbTITLE_DATA::release_url() {
  // @@protoc_insertion_point(field_release:pbTITLE_DATA.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbTITLE_DATA::set_allocated_url(::std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:pbTITLE_DATA.url)
}

// optional string comment = 7;
inline bool pbTITLE_DATA::has_comment() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pbTITLE_DATA::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::std::string& pbTITLE_DATA::comment() const {
  // @@protoc_insertion_point(field_get:pbTITLE_DATA.comment)
  return comment_.GetNoArena();
}
inline void pbTITLE_DATA::set_comment(const ::std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbTITLE_DATA.comment)
}
#if LANG_CXX11
inline void pbTITLE_DATA::set_comment(::std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbTITLE_DATA.comment)
}
#endif
inline void pbTITLE_DATA::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbTITLE_DATA.comment)
}
inline void pbTITLE_DATA::set_comment(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbTITLE_DATA.comment)
}
inline ::std::string* pbTITLE_DATA::mutable_comment() {
  _has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_mutable:pbTITLE_DATA.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbTITLE_DATA::release_comment() {
  // @@protoc_insertion_point(field_release:pbTITLE_DATA.comment)
  if (!has_comment()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return comment_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbTITLE_DATA::set_allocated_comment(::std::string* comment) {
  if (comment != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:pbTITLE_DATA.comment)
}

// optional uint32 track_no = 8;
inline bool pbTITLE_DATA::has_track_no() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pbTITLE_DATA::clear_track_no() {
  track_no_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::uint32 pbTITLE_DATA::track_no() const {
  // @@protoc_insertion_point(field_get:pbTITLE_DATA.track_no)
  return track_no_;
}
inline void pbTITLE_DATA::set_track_no(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  track_no_ = value;
  // @@protoc_insertion_point(field_set:pbTITLE_DATA.track_no)
}

// optional uint32 year = 9;
inline bool pbTITLE_DATA::has_year() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pbTITLE_DATA::clear_year() {
  year_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 pbTITLE_DATA::year() const {
  // @@protoc_insertion_point(field_get:pbTITLE_DATA.year)
  return year_;
}
inline void pbTITLE_DATA::set_year(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  year_ = value;
  // @@protoc_insertion_point(field_set:pbTITLE_DATA.year)
}

// -------------------------------------------------------------------

// pbREQ_INFO

// required int32 netno = 1;
inline bool pbREQ_INFO::has_netno() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pbREQ_INFO::clear_netno() {
  netno_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 pbREQ_INFO::netno() const {
  // @@protoc_insertion_point(field_get:pbREQ_INFO.netno)
  return netno_;
}
inline void pbREQ_INFO::set_netno(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  netno_ = value;
  // @@protoc_insertion_point(field_set:pbREQ_INFO.netno)
}

// required string channel = 2;
inline bool pbREQ_INFO::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pbREQ_INFO::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& pbREQ_INFO::channel() const {
  // @@protoc_insertion_point(field_get:pbREQ_INFO.channel)
  return channel_.GetNoArena();
}
inline void pbREQ_INFO::set_channel(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbREQ_INFO.channel)
}
#if LANG_CXX11
inline void pbREQ_INFO::set_channel(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbREQ_INFO.channel)
}
#endif
inline void pbREQ_INFO::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbREQ_INFO.channel)
}
inline void pbREQ_INFO::set_channel(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbREQ_INFO.channel)
}
inline ::std::string* pbREQ_INFO::mutable_channel() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:pbREQ_INFO.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbREQ_INFO::release_channel() {
  // @@protoc_insertion_point(field_release:pbREQ_INFO.channel)
  if (!has_channel()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return channel_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbREQ_INFO::set_allocated_channel(::std::string* channel) {
  if (channel != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:pbREQ_INFO.channel)
}

// required string nick = 3;
inline bool pbREQ_INFO::has_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pbREQ_INFO::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& pbREQ_INFO::nick() const {
  // @@protoc_insertion_point(field_get:pbREQ_INFO.nick)
  return nick_.GetNoArena();
}
inline void pbREQ_INFO::set_nick(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbREQ_INFO.nick)
}
#if LANG_CXX11
inline void pbREQ_INFO::set_nick(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbREQ_INFO.nick)
}
#endif
inline void pbREQ_INFO::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbREQ_INFO.nick)
}
inline void pbREQ_INFO::set_nick(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbREQ_INFO.nick)
}
inline ::std::string* pbREQ_INFO::mutable_nick() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:pbREQ_INFO.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbREQ_INFO::release_nick() {
  // @@protoc_insertion_point(field_release:pbREQ_INFO.nick)
  if (!has_nick()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return nick_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbREQ_INFO::set_allocated_nick(::std::string* nick) {
  if (nick != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:pbREQ_INFO.nick)
}

// optional int64 playAfter = 4;
inline bool pbREQ_INFO::has_playafter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pbREQ_INFO::clear_playafter() {
  playafter_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int64 pbREQ_INFO::playafter() const {
  // @@protoc_insertion_point(field_get:pbREQ_INFO.playAfter)
  return playafter_;
}
inline void pbREQ_INFO::set_playafter(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  playafter_ = value;
  // @@protoc_insertion_point(field_set:pbREQ_INFO.playAfter)
}

// -------------------------------------------------------------------

// pbQUEUE

// required uint32 ID = 1;
inline bool pbQUEUE::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pbQUEUE::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 pbQUEUE::id() const {
  // @@protoc_insertion_point(field_get:pbQUEUE.ID)
  return id_;
}
inline void pbQUEUE::set_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
  // @@protoc_insertion_point(field_set:pbQUEUE.ID)
}

// required string fn = 2;
inline bool pbQUEUE::has_fn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pbQUEUE::clear_fn() {
  fn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& pbQUEUE::fn() const {
  // @@protoc_insertion_point(field_get:pbQUEUE.fn)
  return fn_.GetNoArena();
}
inline void pbQUEUE::set_fn(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbQUEUE.fn)
}
#if LANG_CXX11
inline void pbQUEUE::set_fn(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  fn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbQUEUE.fn)
}
#endif
inline void pbQUEUE::set_fn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  fn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbQUEUE.fn)
}
inline void pbQUEUE::set_fn(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  fn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbQUEUE.fn)
}
inline ::std::string* pbQUEUE::mutable_fn() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:pbQUEUE.fn)
  return fn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbQUEUE::release_fn() {
  // @@protoc_insertion_point(field_release:pbQUEUE.fn)
  if (!has_fn()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return fn_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbQUEUE::set_allocated_fn(::std::string* fn) {
  if (fn != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fn);
  // @@protoc_insertion_point(field_set_allocated:pbQUEUE.fn)
}

// required string path = 3;
inline bool pbQUEUE::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pbQUEUE::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& pbQUEUE::path() const {
  // @@protoc_insertion_point(field_get:pbQUEUE.path)
  return path_.GetNoArena();
}
inline void pbQUEUE::set_path(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbQUEUE.path)
}
#if LANG_CXX11
inline void pbQUEUE::set_path(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbQUEUE.path)
}
#endif
inline void pbQUEUE::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbQUEUE.path)
}
inline void pbQUEUE::set_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbQUEUE.path)
}
inline ::std::string* pbQUEUE::mutable_path() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:pbQUEUE.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* pbQUEUE::release_path() {
  // @@protoc_insertion_point(field_release:pbQUEUE.path)
  if (!has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void pbQUEUE::set_allocated_path(::std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:pbQUEUE.path)
}

// optional int64 mTime = 4;
inline bool pbQUEUE::has_mtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void pbQUEUE::clear_mtime() {
  mtime_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::int64 pbQUEUE::mtime() const {
  // @@protoc_insertion_point(field_get:pbQUEUE.mTime)
  return mtime_;
}
inline void pbQUEUE::set_mtime(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  mtime_ = value;
  // @@protoc_insertion_point(field_set:pbQUEUE.mTime)
}

// optional int64 LastPlayed = 5;
inline bool pbQUEUE::has_lastplayed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void pbQUEUE::clear_lastplayed() {
  lastplayed_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::int64 pbQUEUE::lastplayed() const {
  // @@protoc_insertion_point(field_get:pbQUEUE.LastPlayed)
  return lastplayed_;
}
inline void pbQUEUE::set_lastplayed(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  lastplayed_ = value;
  // @@protoc_insertion_point(field_set:pbQUEUE.LastPlayed)
}

// optional uint32 songlen = 6;
inline bool pbQUEUE::has_songlen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void pbQUEUE::clear_songlen() {
  songlen_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 pbQUEUE::songlen() const {
  // @@protoc_insertion_point(field_get:pbQUEUE.songlen)
  return songlen_;
}
inline void pbQUEUE::set_songlen(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  songlen_ = value;
  // @@protoc_insertion_point(field_set:pbQUEUE.songlen)
}

// optional int32 req_count = 7;
inline bool pbQUEUE::has_req_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void pbQUEUE::clear_req_count() {
  req_count_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::google::protobuf::int32 pbQUEUE::req_count() const {
  // @@protoc_insertion_point(field_get:pbQUEUE.req_count)
  return req_count_;
}
inline void pbQUEUE::set_req_count(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  req_count_ = value;
  // @@protoc_insertion_point(field_set:pbQUEUE.req_count)
}

// optional uint32 flags = 8;
inline bool pbQUEUE::has_flags() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void pbQUEUE::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 pbQUEUE::flags() const {
  // @@protoc_insertion_point(field_get:pbQUEUE.flags)
  return flags_;
}
inline void pbQUEUE::set_flags(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:pbQUEUE.flags)
}

// optional .pbTITLE_DATA meta = 9;
inline bool pbQUEUE::has_meta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pbQUEUE::clear_meta() {
  if (meta_ != nullptr) meta_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::pbTITLE_DATA& pbQUEUE::meta() const {
  const ::pbTITLE_DATA* p = meta_;
  // @@protoc_insertion_point(field_get:pbQUEUE.meta)
  return p != nullptr ? *p : *reinterpret_cast<const ::pbTITLE_DATA*>(
      &::_pbTITLE_DATA_default_instance_);
}
inline ::pbTITLE_DATA* pbQUEUE::release_meta() {
  // @@protoc_insertion_point(field_release:pbQUEUE.meta)
  _has_bits_[0] &= ~0x00000004u;
  ::pbTITLE_DATA* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::pbTITLE_DATA* pbQUEUE::mutable_meta() {
  _has_bits_[0] |= 0x00000004u;
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbTITLE_DATA>(GetArenaNoVirtual());
    meta_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pbQUEUE.meta)
  return meta_;
}
inline void pbQUEUE::set_allocated_meta(::pbTITLE_DATA* meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete meta_;
  }
  if (meta) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:pbQUEUE.meta)
}

// optional .pbREQ_INFO isreq = 10;
inline bool pbQUEUE::has_isreq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pbQUEUE::clear_isreq() {
  if (isreq_ != nullptr) isreq_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::pbREQ_INFO& pbQUEUE::isreq() const {
  const ::pbREQ_INFO* p = isreq_;
  // @@protoc_insertion_point(field_get:pbQUEUE.isreq)
  return p != nullptr ? *p : *reinterpret_cast<const ::pbREQ_INFO*>(
      &::_pbREQ_INFO_default_instance_);
}
inline ::pbREQ_INFO* pbQUEUE::release_isreq() {
  // @@protoc_insertion_point(field_release:pbQUEUE.isreq)
  _has_bits_[0] &= ~0x00000008u;
  ::pbREQ_INFO* temp = isreq_;
  isreq_ = nullptr;
  return temp;
}
inline ::pbREQ_INFO* pbQUEUE::mutable_isreq() {
  _has_bits_[0] |= 0x00000008u;
  if (isreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbREQ_INFO>(GetArenaNoVirtual());
    isreq_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pbQUEUE.isreq)
  return isreq_;
}
inline void pbQUEUE::set_allocated_isreq(::pbREQ_INFO* isreq) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete isreq_;
  }
  if (isreq) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      isreq = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, isreq, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  isreq_ = isreq;
  // @@protoc_insertion_point(field_set_allocated:pbQUEUE.isreq)
}

// -------------------------------------------------------------------

// pbQUEUE_LIST

// repeated .pbQUEUE list = 1;
inline int pbQUEUE_LIST::list_size() const {
  return list_.size();
}
inline void pbQUEUE_LIST::clear_list() {
  list_.Clear();
}
inline ::pbQUEUE* pbQUEUE_LIST::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:pbQUEUE_LIST.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pbQUEUE >*
pbQUEUE_LIST::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:pbQUEUE_LIST.list)
  return &list_;
}
inline const ::pbQUEUE& pbQUEUE_LIST::list(int index) const {
  // @@protoc_insertion_point(field_get:pbQUEUE_LIST.list)
  return list_.Get(index);
}
inline ::pbQUEUE* pbQUEUE_LIST::add_list() {
  // @@protoc_insertion_point(field_add:pbQUEUE_LIST.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pbQUEUE >&
pbQUEUE_LIST::list() const {
  // @@protoc_insertion_point(field_list:pbQUEUE_LIST.list)
  return list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_autodj_2eproto
