// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autodj.proto

#include "autodj.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_autodj_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_pbREQ_INFO_autodj_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_autodj_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_pbTITLE_DATA_autodj_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_autodj_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_pbQUEUE_autodj_2eproto;
class pbTITLE_DATADefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<pbTITLE_DATA> _instance;
} _pbTITLE_DATA_default_instance_;
class pbREQ_INFODefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<pbREQ_INFO> _instance;
} _pbREQ_INFO_default_instance_;
class pbQUEUEDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<pbQUEUE> _instance;
} _pbQUEUE_default_instance_;
class pbQUEUE_LISTDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<pbQUEUE_LIST> _instance;
} _pbQUEUE_LIST_default_instance_;
static void InitDefaultspbTITLE_DATA_autodj_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_pbTITLE_DATA_default_instance_;
    new (ptr) ::pbTITLE_DATA();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbTITLE_DATA::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_pbTITLE_DATA_autodj_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspbTITLE_DATA_autodj_2eproto}, {}};

static void InitDefaultspbREQ_INFO_autodj_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_pbREQ_INFO_default_instance_;
    new (ptr) ::pbREQ_INFO();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbREQ_INFO::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_pbREQ_INFO_autodj_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultspbREQ_INFO_autodj_2eproto}, {}};

static void InitDefaultspbQUEUE_autodj_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_pbQUEUE_default_instance_;
    new (ptr) ::pbQUEUE();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbQUEUE::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_pbQUEUE_autodj_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultspbQUEUE_autodj_2eproto}, {
      &scc_info_pbTITLE_DATA_autodj_2eproto.base,
      &scc_info_pbREQ_INFO_autodj_2eproto.base,}};

static void InitDefaultspbQUEUE_LIST_autodj_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_pbQUEUE_LIST_default_instance_;
    new (ptr) ::pbQUEUE_LIST();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbQUEUE_LIST::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_pbQUEUE_LIST_autodj_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultspbQUEUE_LIST_autodj_2eproto}, {
      &scc_info_pbQUEUE_autodj_2eproto.base,}};

void InitDefaults_autodj_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_pbTITLE_DATA_autodj_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_pbREQ_INFO_autodj_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_pbQUEUE_autodj_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_pbQUEUE_LIST_autodj_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_autodj_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_autodj_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_autodj_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_autodj_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pbTITLE_DATA, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbTITLE_DATA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbTITLE_DATA, title_),
  PROTOBUF_FIELD_OFFSET(::pbTITLE_DATA, artist_),
  PROTOBUF_FIELD_OFFSET(::pbTITLE_DATA, album_),
  PROTOBUF_FIELD_OFFSET(::pbTITLE_DATA, album_artist_),
  PROTOBUF_FIELD_OFFSET(::pbTITLE_DATA, genre_),
  PROTOBUF_FIELD_OFFSET(::pbTITLE_DATA, url_),
  PROTOBUF_FIELD_OFFSET(::pbTITLE_DATA, comment_),
  PROTOBUF_FIELD_OFFSET(::pbTITLE_DATA, track_no_),
  PROTOBUF_FIELD_OFFSET(::pbTITLE_DATA, year_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::pbREQ_INFO, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbREQ_INFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbREQ_INFO, netno_),
  PROTOBUF_FIELD_OFFSET(::pbREQ_INFO, channel_),
  PROTOBUF_FIELD_OFFSET(::pbREQ_INFO, nick_),
  PROTOBUF_FIELD_OFFSET(::pbREQ_INFO, playafter_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pbQUEUE, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbQUEUE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbQUEUE, id_),
  PROTOBUF_FIELD_OFFSET(::pbQUEUE, fn_),
  PROTOBUF_FIELD_OFFSET(::pbQUEUE, path_),
  PROTOBUF_FIELD_OFFSET(::pbQUEUE, mtime_),
  PROTOBUF_FIELD_OFFSET(::pbQUEUE, lastplayed_),
  PROTOBUF_FIELD_OFFSET(::pbQUEUE, songlen_),
  PROTOBUF_FIELD_OFFSET(::pbQUEUE, req_count_),
  PROTOBUF_FIELD_OFFSET(::pbQUEUE, flags_),
  PROTOBUF_FIELD_OFFSET(::pbQUEUE, meta_),
  PROTOBUF_FIELD_OFFSET(::pbQUEUE, isreq_),
  4,
  0,
  1,
  6,
  7,
  5,
  8,
  9,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pbQUEUE_LIST, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pbQUEUE_LIST, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbQUEUE_LIST, list_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::pbTITLE_DATA)},
  { 23, 32, sizeof(::pbREQ_INFO)},
  { 36, 51, sizeof(::pbQUEUE)},
  { 61, 67, sizeof(::pbQUEUE_LIST)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_pbTITLE_DATA_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_pbREQ_INFO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_pbQUEUE_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_pbQUEUE_LIST_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_autodj_2eproto = {
  {}, AddDescriptors_autodj_2eproto, "autodj.proto", schemas,
  file_default_instances, TableStruct_autodj_2eproto::offsets,
  file_level_metadata_autodj_2eproto, 4, file_level_enum_descriptors_autodj_2eproto, file_level_service_descriptors_autodj_2eproto,
};

const char descriptor_table_protodef_autodj_2eproto[] =
  "\n\014autodj.proto\"\237\001\n\014pbTITLE_DATA\022\r\n\005title"
  "\030\001 \002(\t\022\016\n\006artist\030\002 \001(\t\022\r\n\005album\030\003 \001(\t\022\024\n"
  "\014album_artist\030\004 \001(\t\022\r\n\005genre\030\005 \001(\t\022\013\n\003ur"
  "l\030\006 \001(\t\022\017\n\007comment\030\007 \001(\t\022\020\n\010track_no\030\010 \001"
  "(\r\022\014\n\004year\030\t \001(\r\"M\n\npbREQ_INFO\022\r\n\005netno\030"
  "\001 \002(\005\022\017\n\007channel\030\002 \002(\t\022\014\n\004nick\030\003 \002(\t\022\021\n\t"
  "playAfter\030\004 \001(\003\"\276\001\n\007pbQUEUE\022\n\n\002ID\030\001 \002(\r\022"
  "\n\n\002fn\030\002 \002(\t\022\014\n\004path\030\003 \002(\t\022\r\n\005mTime\030\004 \001(\003"
  "\022\022\n\nLastPlayed\030\005 \001(\003\022\017\n\007songlen\030\006 \001(\r\022\021\n"
  "\treq_count\030\007 \001(\005\022\r\n\005flags\030\010 \001(\r\022\033\n\004meta\030"
  "\t \001(\0132\r.pbTITLE_DATA\022\032\n\005isreq\030\n \001(\0132\013.pb"
  "REQ_INFO\"&\n\014pbQUEUE_LIST\022\026\n\004list\030\001 \003(\0132\010"
  ".pbQUEUE"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_autodj_2eproto = {
  false, InitDefaults_autodj_2eproto, 
  descriptor_table_protodef_autodj_2eproto,
  "autodj.proto", &assign_descriptors_table_autodj_2eproto, 488,
};

void AddDescriptors_autodj_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_autodj_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_autodj_2eproto = []() { AddDescriptors_autodj_2eproto(); return true; }();

// ===================================================================

void pbTITLE_DATA::InitAsDefaultInstance() {
}
class pbTITLE_DATA::HasBitSetters {
 public:
  static void set_has_title(pbTITLE_DATA* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_artist(pbTITLE_DATA* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_album(pbTITLE_DATA* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_album_artist(pbTITLE_DATA* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_genre(pbTITLE_DATA* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_url(pbTITLE_DATA* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_comment(pbTITLE_DATA* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_track_no(pbTITLE_DATA* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_year(pbTITLE_DATA* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pbTITLE_DATA::kTitleFieldNumber;
const int pbTITLE_DATA::kArtistFieldNumber;
const int pbTITLE_DATA::kAlbumFieldNumber;
const int pbTITLE_DATA::kAlbumArtistFieldNumber;
const int pbTITLE_DATA::kGenreFieldNumber;
const int pbTITLE_DATA::kUrlFieldNumber;
const int pbTITLE_DATA::kCommentFieldNumber;
const int pbTITLE_DATA::kTrackNoFieldNumber;
const int pbTITLE_DATA::kYearFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pbTITLE_DATA::pbTITLE_DATA()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbTITLE_DATA)
}
pbTITLE_DATA::pbTITLE_DATA(const pbTITLE_DATA& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_artist()) {
    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_album()) {
    album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
  }
  album_artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_album_artist()) {
    album_artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_artist_);
  }
  genre_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_genre()) {
    genre_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.genre_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_comment()) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  ::memcpy(&track_no_, &from.track_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&year_) -
    reinterpret_cast<char*>(&track_no_)) + sizeof(year_));
  // @@protoc_insertion_point(copy_constructor:pbTITLE_DATA)
}

void pbTITLE_DATA::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_pbTITLE_DATA_autodj_2eproto.base);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  genre_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&track_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&year_) -
      reinterpret_cast<char*>(&track_no_)) + sizeof(year_));
}

pbTITLE_DATA::~pbTITLE_DATA() {
  // @@protoc_insertion_point(destructor:pbTITLE_DATA)
  SharedDtor();
}

void pbTITLE_DATA::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  album_artist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  genre_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void pbTITLE_DATA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const pbTITLE_DATA& pbTITLE_DATA::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_pbTITLE_DATA_autodj_2eproto.base);
  return *internal_default_instance();
}


void pbTITLE_DATA::Clear() {
// @@protoc_insertion_point(message_clear_start:pbTITLE_DATA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      artist_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      album_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      album_artist_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      genre_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      comment_.ClearNonDefaultToEmptyNoArena();
    }
  }
  track_no_ = 0u;
  year_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* pbTITLE_DATA::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<pbTITLE_DATA*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required string title = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pbTITLE_DATA.title");
        object = msg->mutable_title();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string artist = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pbTITLE_DATA.artist");
        object = msg->mutable_artist();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string album = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pbTITLE_DATA.album");
        object = msg->mutable_album();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string album_artist = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pbTITLE_DATA.album_artist");
        object = msg->mutable_album_artist();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string genre = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pbTITLE_DATA.genre");
        object = msg->mutable_genre();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string url = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pbTITLE_DATA.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string comment = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pbTITLE_DATA.comment");
        object = msg->mutable_comment();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 track_no = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_track_no(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 year = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_year(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool pbTITLE_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbTITLE_DATA)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string title = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbTITLE_DATA.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string artist = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->artist().data(), static_cast<int>(this->artist().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbTITLE_DATA.artist");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string album = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->album().data(), static_cast<int>(this->album().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbTITLE_DATA.album");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string album_artist = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album_artist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->album_artist().data(), static_cast<int>(this->album_artist().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbTITLE_DATA.album_artist");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string genre = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_genre()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->genre().data(), static_cast<int>(this->genre().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbTITLE_DATA.genre");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbTITLE_DATA.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string comment = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbTITLE_DATA.comment");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 track_no = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_track_no(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &track_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 year = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_year(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbTITLE_DATA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbTITLE_DATA)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void pbTITLE_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbTITLE_DATA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbTITLE_DATA.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional string artist = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbTITLE_DATA.artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->artist(), output);
  }

  // optional string album = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->album().data(), static_cast<int>(this->album().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbTITLE_DATA.album");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->album(), output);
  }

  // optional string album_artist = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->album_artist().data(), static_cast<int>(this->album_artist().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbTITLE_DATA.album_artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->album_artist(), output);
  }

  // optional string genre = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->genre().data(), static_cast<int>(this->genre().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbTITLE_DATA.genre");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->genre(), output);
  }

  // optional string url = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbTITLE_DATA.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->url(), output);
  }

  // optional string comment = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbTITLE_DATA.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->comment(), output);
  }

  // optional uint32 track_no = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->track_no(), output);
  }

  // optional uint32 year = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->year(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbTITLE_DATA)
}

::google::protobuf::uint8* pbTITLE_DATA::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbTITLE_DATA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbTITLE_DATA.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional string artist = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artist().data(), static_cast<int>(this->artist().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbTITLE_DATA.artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->artist(), target);
  }

  // optional string album = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->album().data(), static_cast<int>(this->album().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbTITLE_DATA.album");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->album(), target);
  }

  // optional string album_artist = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->album_artist().data(), static_cast<int>(this->album_artist().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbTITLE_DATA.album_artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->album_artist(), target);
  }

  // optional string genre = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->genre().data(), static_cast<int>(this->genre().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbTITLE_DATA.genre");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->genre(), target);
  }

  // optional string url = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbTITLE_DATA.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->url(), target);
  }

  // optional string comment = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbTITLE_DATA.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->comment(), target);
  }

  // optional uint32 track_no = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->track_no(), target);
  }

  // optional uint32 year = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->year(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbTITLE_DATA)
  return target;
}

size_t pbTITLE_DATA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbTITLE_DATA)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string title = 1;
  if (has_title()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional string artist = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artist());
    }

    // optional string album = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album());
    }

    // optional string album_artist = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album_artist());
    }

    // optional string genre = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->genre());
    }

    // optional string url = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string comment = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional uint32 track_no = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->track_no());
    }

  }
  // optional uint32 year = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->year());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pbTITLE_DATA::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbTITLE_DATA)
  GOOGLE_DCHECK_NE(&from, this);
  const pbTITLE_DATA* source =
      ::google::protobuf::DynamicCastToGenerated<pbTITLE_DATA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbTITLE_DATA)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbTITLE_DATA)
    MergeFrom(*source);
  }
}

void pbTITLE_DATA::MergeFrom(const pbTITLE_DATA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbTITLE_DATA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      album_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      album_artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.album_artist_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      genre_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.genre_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
    }
    if (cached_has_bits & 0x00000080u) {
      track_no_ = from.track_no_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_year(from.year());
  }
}

void pbTITLE_DATA::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbTITLE_DATA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbTITLE_DATA::CopyFrom(const pbTITLE_DATA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbTITLE_DATA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbTITLE_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void pbTITLE_DATA::Swap(pbTITLE_DATA* other) {
  if (other == this) return;
  InternalSwap(other);
}
void pbTITLE_DATA::InternalSwap(pbTITLE_DATA* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  artist_.Swap(&other->artist_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  album_.Swap(&other->album_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  album_artist_.Swap(&other->album_artist_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  genre_.Swap(&other->genre_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  comment_.Swap(&other->comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(track_no_, other->track_no_);
  swap(year_, other->year_);
}

::google::protobuf::Metadata pbTITLE_DATA::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_autodj_2eproto);
  return ::file_level_metadata_autodj_2eproto[kIndexInFileMessages];
}


// ===================================================================

void pbREQ_INFO::InitAsDefaultInstance() {
}
class pbREQ_INFO::HasBitSetters {
 public:
  static void set_has_netno(pbREQ_INFO* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_channel(pbREQ_INFO* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_nick(pbREQ_INFO* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_playafter(pbREQ_INFO* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pbREQ_INFO::kNetnoFieldNumber;
const int pbREQ_INFO::kChannelFieldNumber;
const int pbREQ_INFO::kNickFieldNumber;
const int pbREQ_INFO::kPlayAfterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pbREQ_INFO::pbREQ_INFO()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbREQ_INFO)
}
pbREQ_INFO::pbREQ_INFO(const pbREQ_INFO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel()) {
    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nick()) {
    nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  ::memcpy(&playafter_, &from.playafter_,
    static_cast<size_t>(reinterpret_cast<char*>(&netno_) -
    reinterpret_cast<char*>(&playafter_)) + sizeof(netno_));
  // @@protoc_insertion_point(copy_constructor:pbREQ_INFO)
}

void pbREQ_INFO::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_pbREQ_INFO_autodj_2eproto.base);
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&playafter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&netno_) -
      reinterpret_cast<char*>(&playafter_)) + sizeof(netno_));
}

pbREQ_INFO::~pbREQ_INFO() {
  // @@protoc_insertion_point(destructor:pbREQ_INFO)
  SharedDtor();
}

void pbREQ_INFO::SharedDtor() {
  channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void pbREQ_INFO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const pbREQ_INFO& pbREQ_INFO::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_pbREQ_INFO_autodj_2eproto.base);
  return *internal_default_instance();
}


void pbREQ_INFO::Clear() {
// @@protoc_insertion_point(message_clear_start:pbREQ_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      channel_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      nick_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&playafter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&netno_) -
        reinterpret_cast<char*>(&playafter_)) + sizeof(netno_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* pbREQ_INFO::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<pbREQ_INFO*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 netno = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_netno(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required string channel = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pbREQ_INFO.channel");
        object = msg->mutable_channel();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // required string nick = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pbREQ_INFO.nick");
        object = msg->mutable_nick();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int64 playAfter = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_playafter(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool pbREQ_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbREQ_INFO)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 netno = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_netno(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &netno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string channel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel().data(), static_cast<int>(this->channel().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbREQ_INFO.channel");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string nick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick().data(), static_cast<int>(this->nick().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbREQ_INFO.nick");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 playAfter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_playafter(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playafter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbREQ_INFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbREQ_INFO)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void pbREQ_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbREQ_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 netno = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->netno(), output);
  }

  // required string channel = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbREQ_INFO.channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel(), output);
  }

  // required string nick = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), static_cast<int>(this->nick().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbREQ_INFO.nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nick(), output);
  }

  // optional int64 playAfter = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->playafter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbREQ_INFO)
}

::google::protobuf::uint8* pbREQ_INFO::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbREQ_INFO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 netno = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->netno(), target);
  }

  // required string channel = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbREQ_INFO.channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel(), target);
  }

  // required string nick = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), static_cast<int>(this->nick().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbREQ_INFO.nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nick(), target);
  }

  // optional int64 playAfter = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->playafter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbREQ_INFO)
  return target;
}

size_t pbREQ_INFO::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pbREQ_INFO)
  size_t total_size = 0;

  if (has_channel()) {
    // required string channel = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel());
  }

  if (has_nick()) {
    // required string nick = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick());
  }

  if (has_netno()) {
    // required int32 netno = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->netno());
  }

  return total_size;
}
size_t pbREQ_INFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbREQ_INFO)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string channel = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->channel());

    // required string nick = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick());

    // required int32 netno = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->netno());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 playAfter = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->playafter());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pbREQ_INFO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbREQ_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  const pbREQ_INFO* source =
      ::google::protobuf::DynamicCastToGenerated<pbREQ_INFO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbREQ_INFO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbREQ_INFO)
    MergeFrom(*source);
  }
}

void pbREQ_INFO::MergeFrom(const pbREQ_INFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbREQ_INFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
    }
    if (cached_has_bits & 0x00000004u) {
      playafter_ = from.playafter_;
    }
    if (cached_has_bits & 0x00000008u) {
      netno_ = from.netno_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void pbREQ_INFO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbREQ_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbREQ_INFO::CopyFrom(const pbREQ_INFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbREQ_INFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbREQ_INFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  return true;
}

void pbREQ_INFO::Swap(pbREQ_INFO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void pbREQ_INFO::InternalSwap(pbREQ_INFO* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  channel_.Swap(&other->channel_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nick_.Swap(&other->nick_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(playafter_, other->playafter_);
  swap(netno_, other->netno_);
}

::google::protobuf::Metadata pbREQ_INFO::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_autodj_2eproto);
  return ::file_level_metadata_autodj_2eproto[kIndexInFileMessages];
}


// ===================================================================

void pbQUEUE::InitAsDefaultInstance() {
  ::_pbQUEUE_default_instance_._instance.get_mutable()->meta_ = const_cast< ::pbTITLE_DATA*>(
      ::pbTITLE_DATA::internal_default_instance());
  ::_pbQUEUE_default_instance_._instance.get_mutable()->isreq_ = const_cast< ::pbREQ_INFO*>(
      ::pbREQ_INFO::internal_default_instance());
}
class pbQUEUE::HasBitSetters {
 public:
  static void set_has_id(pbQUEUE* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_fn(pbQUEUE* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_path(pbQUEUE* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_mtime(pbQUEUE* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_lastplayed(pbQUEUE* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_songlen(pbQUEUE* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_req_count(pbQUEUE* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_flags(pbQUEUE* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static const ::pbTITLE_DATA& meta(const pbQUEUE* msg);
  static void set_has_meta(pbQUEUE* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::pbREQ_INFO& isreq(const pbQUEUE* msg);
  static void set_has_isreq(pbQUEUE* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

const ::pbTITLE_DATA&
pbQUEUE::HasBitSetters::meta(const pbQUEUE* msg) {
  return *msg->meta_;
}
const ::pbREQ_INFO&
pbQUEUE::HasBitSetters::isreq(const pbQUEUE* msg) {
  return *msg->isreq_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pbQUEUE::kIDFieldNumber;
const int pbQUEUE::kFnFieldNumber;
const int pbQUEUE::kPathFieldNumber;
const int pbQUEUE::kMTimeFieldNumber;
const int pbQUEUE::kLastPlayedFieldNumber;
const int pbQUEUE::kSonglenFieldNumber;
const int pbQUEUE::kReqCountFieldNumber;
const int pbQUEUE::kFlagsFieldNumber;
const int pbQUEUE::kMetaFieldNumber;
const int pbQUEUE::kIsreqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pbQUEUE::pbQUEUE()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbQUEUE)
}
pbQUEUE::pbQUEUE(const pbQUEUE& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fn()) {
    fn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fn_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.has_meta()) {
    meta_ = new ::pbTITLE_DATA(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from.has_isreq()) {
    isreq_ = new ::pbREQ_INFO(*from.isreq_);
  } else {
    isreq_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&id_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:pbQUEUE)
}

void pbQUEUE::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_pbQUEUE_autodj_2eproto.base);
  fn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(flags_));
}

pbQUEUE::~pbQUEUE() {
  // @@protoc_insertion_point(destructor:pbQUEUE)
  SharedDtor();
}

void pbQUEUE::SharedDtor() {
  fn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete isreq_;
}

void pbQUEUE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const pbQUEUE& pbQUEUE::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_pbQUEUE_autodj_2eproto.base);
  return *internal_default_instance();
}


void pbQUEUE::Clear() {
// @@protoc_insertion_point(message_clear_start:pbQUEUE)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      fn_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(meta_ != nullptr);
      meta_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(isreq_ != nullptr);
      isreq_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lastplayed_) -
        reinterpret_cast<char*>(&id_)) + sizeof(lastplayed_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&req_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&req_count_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* pbQUEUE::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<pbQUEUE*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 ID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required string fn = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pbQUEUE.fn");
        object = msg->mutable_fn();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // required string path = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pbQUEUE.path");
        object = msg->mutable_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int64 mTime = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_mtime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 LastPlayed = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_lastplayed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 songlen = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_songlen(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 req_count = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_req_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 flags = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .pbTITLE_DATA meta = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pbTITLE_DATA::_InternalParse;
        object = msg->mutable_meta();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .pbREQ_INFO isreq = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pbREQ_INFO::_InternalParse;
        object = msg->mutable_isreq();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool pbQUEUE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbQUEUE)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string fn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fn().data(), static_cast<int>(this->fn().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbQUEUE.fn");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pbQUEUE.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 mTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_mtime(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 LastPlayed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_lastplayed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastplayed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 songlen = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_songlen(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &songlen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 req_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_req_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &req_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pbTITLE_DATA meta = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pbREQ_INFO isreq = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_isreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbQUEUE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbQUEUE)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void pbQUEUE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbQUEUE)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ID = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string fn = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fn().data(), static_cast<int>(this->fn().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbQUEUE.fn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fn(), output);
  }

  // required string path = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbQUEUE.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->path(), output);
  }

  // optional int64 mTime = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->mtime(), output);
  }

  // optional int64 LastPlayed = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->lastplayed(), output);
  }

  // optional uint32 songlen = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->songlen(), output);
  }

  // optional int32 req_count = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->req_count(), output);
  }

  // optional uint32 flags = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->flags(), output);
  }

  // optional .pbTITLE_DATA meta = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::meta(this), output);
  }

  // optional .pbREQ_INFO isreq = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::isreq(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbQUEUE)
}

::google::protobuf::uint8* pbQUEUE::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbQUEUE)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ID = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string fn = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fn().data(), static_cast<int>(this->fn().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbQUEUE.fn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fn(), target);
  }

  // required string path = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pbQUEUE.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }

  // optional int64 mTime = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->mtime(), target);
  }

  // optional int64 LastPlayed = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->lastplayed(), target);
  }

  // optional uint32 songlen = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->songlen(), target);
  }

  // optional int32 req_count = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->req_count(), target);
  }

  // optional uint32 flags = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->flags(), target);
  }

  // optional .pbTITLE_DATA meta = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::meta(this), target);
  }

  // optional .pbREQ_INFO isreq = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::isreq(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbQUEUE)
  return target;
}

size_t pbQUEUE::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pbQUEUE)
  size_t total_size = 0;

  if (has_fn()) {
    // required string fn = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fn());
  }

  if (has_path()) {
    // required string path = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  if (has_id()) {
    // required uint32 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  return total_size;
}
size_t pbQUEUE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbQUEUE)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required string fn = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fn());

    // required string path = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());

    // required uint32 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .pbTITLE_DATA meta = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *meta_);
    }

    // optional .pbREQ_INFO isreq = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *isreq_);
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional uint32 songlen = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->songlen());
    }

    // optional int64 mTime = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mtime());
    }

    // optional int64 LastPlayed = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastplayed());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 req_count = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->req_count());
    }

    // optional uint32 flags = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pbQUEUE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbQUEUE)
  GOOGLE_DCHECK_NE(&from, this);
  const pbQUEUE* source =
      ::google::protobuf::DynamicCastToGenerated<pbQUEUE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbQUEUE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbQUEUE)
    MergeFrom(*source);
  }
}

void pbQUEUE::MergeFrom(const pbQUEUE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbQUEUE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      fn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fn_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_meta()->::pbTITLE_DATA::MergeFrom(from.meta());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_isreq()->::pbREQ_INFO::MergeFrom(from.isreq());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      songlen_ = from.songlen_;
    }
    if (cached_has_bits & 0x00000040u) {
      mtime_ = from.mtime_;
    }
    if (cached_has_bits & 0x00000080u) {
      lastplayed_ = from.lastplayed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      req_count_ = from.req_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void pbQUEUE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbQUEUE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbQUEUE::CopyFrom(const pbQUEUE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbQUEUE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbQUEUE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;
  if (has_meta()) {
    if (!this->meta_->IsInitialized()) return false;
  }
  if (has_isreq()) {
    if (!this->isreq_->IsInitialized()) return false;
  }
  return true;
}

void pbQUEUE::Swap(pbQUEUE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void pbQUEUE::InternalSwap(pbQUEUE* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fn_.Swap(&other->fn_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(meta_, other->meta_);
  swap(isreq_, other->isreq_);
  swap(id_, other->id_);
  swap(songlen_, other->songlen_);
  swap(mtime_, other->mtime_);
  swap(lastplayed_, other->lastplayed_);
  swap(req_count_, other->req_count_);
  swap(flags_, other->flags_);
}

::google::protobuf::Metadata pbQUEUE::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_autodj_2eproto);
  return ::file_level_metadata_autodj_2eproto[kIndexInFileMessages];
}


// ===================================================================

void pbQUEUE_LIST::InitAsDefaultInstance() {
}
class pbQUEUE_LIST::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int pbQUEUE_LIST::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

pbQUEUE_LIST::pbQUEUE_LIST()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbQUEUE_LIST)
}
pbQUEUE_LIST::pbQUEUE_LIST(const pbQUEUE_LIST& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbQUEUE_LIST)
}

void pbQUEUE_LIST::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_pbQUEUE_LIST_autodj_2eproto.base);
}

pbQUEUE_LIST::~pbQUEUE_LIST() {
  // @@protoc_insertion_point(destructor:pbQUEUE_LIST)
  SharedDtor();
}

void pbQUEUE_LIST::SharedDtor() {
}

void pbQUEUE_LIST::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const pbQUEUE_LIST& pbQUEUE_LIST::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_pbQUEUE_LIST_autodj_2eproto.base);
  return *internal_default_instance();
}


void pbQUEUE_LIST::Clear() {
// @@protoc_insertion_point(message_clear_start:pbQUEUE_LIST)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* pbQUEUE_LIST::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<pbQUEUE_LIST*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .pbQUEUE list = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pbQUEUE::_InternalParse;
          object = msg->add_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool pbQUEUE_LIST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbQUEUE_LIST)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbQUEUE list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbQUEUE_LIST)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbQUEUE_LIST)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void pbQUEUE_LIST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbQUEUE_LIST)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbQUEUE list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbQUEUE_LIST)
}

::google::protobuf::uint8* pbQUEUE_LIST::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbQUEUE_LIST)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbQUEUE list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbQUEUE_LIST)
  return target;
}

size_t pbQUEUE_LIST::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbQUEUE_LIST)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbQUEUE list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pbQUEUE_LIST::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbQUEUE_LIST)
  GOOGLE_DCHECK_NE(&from, this);
  const pbQUEUE_LIST* source =
      ::google::protobuf::DynamicCastToGenerated<pbQUEUE_LIST>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbQUEUE_LIST)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbQUEUE_LIST)
    MergeFrom(*source);
  }
}

void pbQUEUE_LIST::MergeFrom(const pbQUEUE_LIST& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbQUEUE_LIST)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void pbQUEUE_LIST::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbQUEUE_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbQUEUE_LIST::CopyFrom(const pbQUEUE_LIST& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbQUEUE_LIST)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbQUEUE_LIST::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void pbQUEUE_LIST::Swap(pbQUEUE_LIST* other) {
  if (other == this) return;
  InternalSwap(other);
}
void pbQUEUE_LIST::InternalSwap(pbQUEUE_LIST* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::google::protobuf::Metadata pbQUEUE_LIST::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_autodj_2eproto);
  return ::file_level_metadata_autodj_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::pbTITLE_DATA* Arena::CreateMaybeMessage< ::pbTITLE_DATA >(Arena* arena) {
  return Arena::CreateInternal< ::pbTITLE_DATA >(arena);
}
template<> PROTOBUF_NOINLINE ::pbREQ_INFO* Arena::CreateMaybeMessage< ::pbREQ_INFO >(Arena* arena) {
  return Arena::CreateInternal< ::pbREQ_INFO >(arena);
}
template<> PROTOBUF_NOINLINE ::pbQUEUE* Arena::CreateMaybeMessage< ::pbQUEUE >(Arena* arena) {
  return Arena::CreateInternal< ::pbQUEUE >(arena);
}
template<> PROTOBUF_NOINLINE ::pbQUEUE_LIST* Arena::CreateMaybeMessage< ::pbQUEUE_LIST >(Arena* arena) {
  return Arena::CreateInternal< ::pbQUEUE_LIST >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
