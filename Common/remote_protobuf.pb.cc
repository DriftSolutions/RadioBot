// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote_protobuf.proto

#include "remote_protobuf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_remote_5fprotobuf_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RemoteFindResultEntry_remote_5fprotobuf_2eproto;
class RemoteFindQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemoteFindQuery> _instance;
} _RemoteFindQuery_default_instance_;
class RemoteFindResultEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemoteFindResultEntry> _instance;
} _RemoteFindResultEntry_default_instance_;
class RemoteFindResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RemoteFindResult> _instance;
} _RemoteFindResult_default_instance_;
static void InitDefaultsRemoteFindQuery_remote_5fprotobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RemoteFindQuery_default_instance_;
    new (ptr) ::RemoteFindQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RemoteFindQuery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RemoteFindQuery_remote_5fprotobuf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRemoteFindQuery_remote_5fprotobuf_2eproto}, {}};

static void InitDefaultsRemoteFindResultEntry_remote_5fprotobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RemoteFindResultEntry_default_instance_;
    new (ptr) ::RemoteFindResultEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RemoteFindResultEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RemoteFindResultEntry_remote_5fprotobuf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRemoteFindResultEntry_remote_5fprotobuf_2eproto}, {}};

static void InitDefaultsRemoteFindResult_remote_5fprotobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RemoteFindResult_default_instance_;
    new (ptr) ::RemoteFindResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RemoteFindResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RemoteFindResult_remote_5fprotobuf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRemoteFindResult_remote_5fprotobuf_2eproto}, {
      &scc_info_RemoteFindResultEntry_remote_5fprotobuf_2eproto.base,}};

void InitDefaults_remote_5fprotobuf_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_RemoteFindQuery_remote_5fprotobuf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RemoteFindResultEntry_remote_5fprotobuf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RemoteFindResult_remote_5fprotobuf_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_remote_5fprotobuf_2eproto[3];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_remote_5fprotobuf_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_remote_5fprotobuf_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_remote_5fprotobuf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::RemoteFindQuery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RemoteFindQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RemoteFindQuery, search_id_),
  PROTOBUF_FIELD_OFFSET(::RemoteFindQuery, query_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::RemoteFindResultEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RemoteFindResultEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RemoteFindResultEntry, file_),
  PROTOBUF_FIELD_OFFSET(::RemoteFindResultEntry, file_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::RemoteFindResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RemoteFindResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RemoteFindResult, search_id_),
  PROTOBUF_FIELD_OFFSET(::RemoteFindResult, files_),
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::RemoteFindQuery)},
  { 9, 16, sizeof(::RemoteFindResultEntry)},
  { 18, 25, sizeof(::RemoteFindResult)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RemoteFindQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RemoteFindResultEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RemoteFindResult_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_remote_5fprotobuf_2eproto = {
  {}, AddDescriptors_remote_5fprotobuf_2eproto, "remote_protobuf.proto", schemas,
  file_default_instances, TableStruct_remote_5fprotobuf_2eproto::offsets,
  file_level_metadata_remote_5fprotobuf_2eproto, 3, file_level_enum_descriptors_remote_5fprotobuf_2eproto, file_level_service_descriptors_remote_5fprotobuf_2eproto,
};

const char descriptor_table_protodef_remote_5fprotobuf_2eproto[] =
  "\n\025remote_protobuf.proto\"3\n\017RemoteFindQue"
  "ry\022\021\n\tsearch_id\030\001 \002(\r\022\r\n\005query\030\002 \002(\t\"6\n\025"
  "RemoteFindResultEntry\022\014\n\004file\030\001 \002(\t\022\017\n\007f"
  "ile_id\030\002 \001(\r\"L\n\020RemoteFindResult\022\021\n\tsear"
  "ch_id\030\001 \002(\r\022%\n\005files\030\002 \003(\0132\026.RemoteFindR"
  "esultEntry"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_remote_5fprotobuf_2eproto = {
  false, InitDefaults_remote_5fprotobuf_2eproto, 
  descriptor_table_protodef_remote_5fprotobuf_2eproto,
  "remote_protobuf.proto", &assign_descriptors_table_remote_5fprotobuf_2eproto, 210,
};

void AddDescriptors_remote_5fprotobuf_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_remote_5fprotobuf_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_remote_5fprotobuf_2eproto = []() { AddDescriptors_remote_5fprotobuf_2eproto(); return true; }();

// ===================================================================

void RemoteFindQuery::InitAsDefaultInstance() {
}
class RemoteFindQuery::HasBitSetters {
 public:
  static void set_has_search_id(RemoteFindQuery* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_query(RemoteFindQuery* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoteFindQuery::kSearchIdFieldNumber;
const int RemoteFindQuery::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoteFindQuery::RemoteFindQuery()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RemoteFindQuery)
}
RemoteFindQuery::RemoteFindQuery(const RemoteFindQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query()) {
    query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
  }
  search_id_ = from.search_id_;
  // @@protoc_insertion_point(copy_constructor:RemoteFindQuery)
}

void RemoteFindQuery::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RemoteFindQuery_remote_5fprotobuf_2eproto.base);
  query_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_id_ = 0u;
}

RemoteFindQuery::~RemoteFindQuery() {
  // @@protoc_insertion_point(destructor:RemoteFindQuery)
  SharedDtor();
}

void RemoteFindQuery::SharedDtor() {
  query_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RemoteFindQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteFindQuery& RemoteFindQuery::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RemoteFindQuery_remote_5fprotobuf_2eproto.base);
  return *internal_default_instance();
}


void RemoteFindQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoteFindQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    query_.ClearNonDefaultToEmptyNoArena();
  }
  search_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RemoteFindQuery::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RemoteFindQuery*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 search_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_search_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required string query = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("RemoteFindQuery.query");
        object = msg->mutable_query();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RemoteFindQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RemoteFindQuery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 search_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_search_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string query = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), static_cast<int>(this->query().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RemoteFindQuery.query");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RemoteFindQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RemoteFindQuery)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RemoteFindQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RemoteFindQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 search_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->search_id(), output);
  }

  // required string query = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RemoteFindQuery.query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->query(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RemoteFindQuery)
}

::google::protobuf::uint8* RemoteFindQuery::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoteFindQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 search_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->search_id(), target);
  }

  // required string query = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), static_cast<int>(this->query().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RemoteFindQuery.query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->query(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoteFindQuery)
  return target;
}

size_t RemoteFindQuery::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RemoteFindQuery)
  size_t total_size = 0;

  if (has_query()) {
    // required string query = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());
  }

  if (has_search_id()) {
    // required uint32 search_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->search_id());
  }

  return total_size;
}
size_t RemoteFindQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoteFindQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string query = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query());

    // required uint32 search_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->search_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteFindQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemoteFindQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteFindQuery* source =
      ::google::protobuf::DynamicCastToGenerated<RemoteFindQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemoteFindQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemoteFindQuery)
    MergeFrom(*source);
  }
}

void RemoteFindQuery::MergeFrom(const RemoteFindQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemoteFindQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      query_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_);
    }
    if (cached_has_bits & 0x00000002u) {
      search_id_ = from.search_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemoteFindQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemoteFindQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteFindQuery::CopyFrom(const RemoteFindQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoteFindQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteFindQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RemoteFindQuery::Swap(RemoteFindQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoteFindQuery::InternalSwap(RemoteFindQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  query_.Swap(&other->query_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(search_id_, other->search_id_);
}

::google::protobuf::Metadata RemoteFindQuery::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_remote_5fprotobuf_2eproto);
  return ::file_level_metadata_remote_5fprotobuf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RemoteFindResultEntry::InitAsDefaultInstance() {
}
class RemoteFindResultEntry::HasBitSetters {
 public:
  static void set_has_file(RemoteFindResultEntry* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_file_id(RemoteFindResultEntry* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoteFindResultEntry::kFileFieldNumber;
const int RemoteFindResultEntry::kFileIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoteFindResultEntry::RemoteFindResultEntry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RemoteFindResultEntry)
}
RemoteFindResultEntry::RemoteFindResultEntry(const RemoteFindResultEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file()) {
    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  file_id_ = from.file_id_;
  // @@protoc_insertion_point(copy_constructor:RemoteFindResultEntry)
}

void RemoteFindResultEntry::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RemoteFindResultEntry_remote_5fprotobuf_2eproto.base);
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_id_ = 0u;
}

RemoteFindResultEntry::~RemoteFindResultEntry() {
  // @@protoc_insertion_point(destructor:RemoteFindResultEntry)
  SharedDtor();
}

void RemoteFindResultEntry::SharedDtor() {
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RemoteFindResultEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteFindResultEntry& RemoteFindResultEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RemoteFindResultEntry_remote_5fprotobuf_2eproto.base);
  return *internal_default_instance();
}


void RemoteFindResultEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoteFindResultEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_.ClearNonDefaultToEmptyNoArena();
  }
  file_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RemoteFindResultEntry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RemoteFindResultEntry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required string file = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("RemoteFindResultEntry.file");
        object = msg->mutable_file();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 file_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_file_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RemoteFindResultEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RemoteFindResultEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file().data(), static_cast<int>(this->file().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RemoteFindResultEntry.file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_file_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RemoteFindResultEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RemoteFindResultEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RemoteFindResultEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RemoteFindResultEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string file = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), static_cast<int>(this->file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RemoteFindResultEntry.file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file(), output);
  }

  // optional uint32 file_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->file_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RemoteFindResultEntry)
}

::google::protobuf::uint8* RemoteFindResultEntry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoteFindResultEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string file = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), static_cast<int>(this->file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RemoteFindResultEntry.file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file(), target);
  }

  // optional uint32 file_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->file_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoteFindResultEntry)
  return target;
}

size_t RemoteFindResultEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoteFindResultEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string file = 1;
  if (has_file()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 file_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->file_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteFindResultEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemoteFindResultEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteFindResultEntry* source =
      ::google::protobuf::DynamicCastToGenerated<RemoteFindResultEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemoteFindResultEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemoteFindResultEntry)
    MergeFrom(*source);
  }
}

void RemoteFindResultEntry::MergeFrom(const RemoteFindResultEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemoteFindResultEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
    }
    if (cached_has_bits & 0x00000002u) {
      file_id_ = from.file_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemoteFindResultEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemoteFindResultEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteFindResultEntry::CopyFrom(const RemoteFindResultEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoteFindResultEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteFindResultEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RemoteFindResultEntry::Swap(RemoteFindResultEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoteFindResultEntry::InternalSwap(RemoteFindResultEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_.Swap(&other->file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_id_, other->file_id_);
}

::google::protobuf::Metadata RemoteFindResultEntry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_remote_5fprotobuf_2eproto);
  return ::file_level_metadata_remote_5fprotobuf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RemoteFindResult::InitAsDefaultInstance() {
}
class RemoteFindResult::HasBitSetters {
 public:
  static void set_has_search_id(RemoteFindResult* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoteFindResult::kSearchIdFieldNumber;
const int RemoteFindResult::kFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoteFindResult::RemoteFindResult()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RemoteFindResult)
}
RemoteFindResult::RemoteFindResult(const RemoteFindResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      files_(from.files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  search_id_ = from.search_id_;
  // @@protoc_insertion_point(copy_constructor:RemoteFindResult)
}

void RemoteFindResult::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RemoteFindResult_remote_5fprotobuf_2eproto.base);
  search_id_ = 0u;
}

RemoteFindResult::~RemoteFindResult() {
  // @@protoc_insertion_point(destructor:RemoteFindResult)
  SharedDtor();
}

void RemoteFindResult::SharedDtor() {
}

void RemoteFindResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteFindResult& RemoteFindResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RemoteFindResult_remote_5fprotobuf_2eproto.base);
  return *internal_default_instance();
}


void RemoteFindResult::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoteFindResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  search_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RemoteFindResult::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RemoteFindResult*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 search_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_search_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .RemoteFindResultEntry files = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::RemoteFindResultEntry::_InternalParse;
          object = msg->add_files();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RemoteFindResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RemoteFindResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 search_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_search_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .RemoteFindResultEntry files = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RemoteFindResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RemoteFindResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RemoteFindResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RemoteFindResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 search_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->search_id(), output);
  }

  // repeated .RemoteFindResultEntry files = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->files_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->files(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RemoteFindResult)
}

::google::protobuf::uint8* RemoteFindResult::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoteFindResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 search_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->search_id(), target);
  }

  // repeated .RemoteFindResultEntry files = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->files_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->files(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoteFindResult)
  return target;
}

size_t RemoteFindResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoteFindResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 search_id = 1;
  if (has_search_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->search_id());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RemoteFindResultEntry files = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->files_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->files(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteFindResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemoteFindResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteFindResult* source =
      ::google::protobuf::DynamicCastToGenerated<RemoteFindResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemoteFindResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemoteFindResult)
    MergeFrom(*source);
  }
}

void RemoteFindResult::MergeFrom(const RemoteFindResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemoteFindResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  if (from.has_search_id()) {
    set_search_id(from.search_id());
  }
}

void RemoteFindResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemoteFindResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteFindResult::CopyFrom(const RemoteFindResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoteFindResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteFindResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->files())) return false;
  return true;
}

void RemoteFindResult::Swap(RemoteFindResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoteFindResult::InternalSwap(RemoteFindResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&files_)->InternalSwap(CastToBase(&other->files_));
  swap(search_id_, other->search_id_);
}

::google::protobuf::Metadata RemoteFindResult::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_remote_5fprotobuf_2eproto);
  return ::file_level_metadata_remote_5fprotobuf_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::RemoteFindQuery* Arena::CreateMaybeMessage< ::RemoteFindQuery >(Arena* arena) {
  return Arena::CreateInternal< ::RemoteFindQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::RemoteFindResultEntry* Arena::CreateMaybeMessage< ::RemoteFindResultEntry >(Arena* arena) {
  return Arena::CreateInternal< ::RemoteFindResultEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::RemoteFindResult* Arena::CreateMaybeMessage< ::RemoteFindResult >(Arena* arena) {
  return Arena::CreateInternal< ::RemoteFindResult >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
