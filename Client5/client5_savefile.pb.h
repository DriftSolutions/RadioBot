//@AUTOHEADER@BEGIN@
/**********************************************************************\
|                          ShoutIRC RadioBot                           |
|           Copyright 2004-2020 Drift Solutions / Indy Sams            |
|        More information available at https://www.shoutirc.com        |
|                                                                      |
|                    This file is part of RadioBot.                    |
|                                                                      |
|   RadioBot is free software: you can redistribute it and/or modify   |
| it under the terms of the GNU General Public License as published by |
|  the Free Software Foundation, either version 3 of the License, or   |
|                 (at your option) any later version.                  |
|                                                                      |
|     RadioBot is distributed in the hope that it will be useful,      |
|    but WITHOUT ANY WARRANTY; without even the implied warranty of    |
|     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the     |
|             GNU General Public License for more details.             |
|                                                                      |
|  You should have received a copy of the GNU General Public License   |
|  along with RadioBot. If not, see <https://www.gnu.org/licenses/>.   |
\**********************************************************************/
//@AUTOHEADER@END@

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client5_savefile.proto

#ifndef PROTOBUF_INCLUDED_client5_5fsavefile_2eproto
#define PROTOBUF_INCLUDED_client5_5fsavefile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client5_5fsavefile_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_client5_5fsavefile_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_client5_5fsavefile_2eproto();
class ConfigFile;
class ConfigFileDefaultTypeInternal;
extern ConfigFileDefaultTypeInternal _ConfigFile_default_instance_;
class SaveHost;
class SaveHostDefaultTypeInternal;
extern SaveHostDefaultTypeInternal _SaveHost_default_instance_;
class SaveMusicDB;
class SaveMusicDBDefaultTypeInternal;
extern SaveMusicDBDefaultTypeInternal _SaveMusicDB_default_instance_;
class SaveSAM;
class SaveSAMDefaultTypeInternal;
extern SaveSAMDefaultTypeInternal _SaveSAM_default_instance_;
namespace google {
namespace protobuf {
template<> ::ConfigFile* Arena::CreateMaybeMessage<::ConfigFile>(Arena*);
template<> ::SaveHost* Arena::CreateMaybeMessage<::SaveHost>(Arena*);
template<> ::SaveMusicDB* Arena::CreateMaybeMessage<::SaveMusicDB>(Arena*);
template<> ::SaveSAM* Arena::CreateMaybeMessage<::SaveSAM>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class SaveHost final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SaveHost) */ {
 public:
  SaveHost();
  virtual ~SaveHost();

  SaveHost(const SaveHost& from);

  inline SaveHost& operator=(const SaveHost& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SaveHost(SaveHost&& from) noexcept
    : SaveHost() {
    *this = ::std::move(from);
  }

  inline SaveHost& operator=(SaveHost&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SaveHost& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveHost* internal_default_instance() {
    return reinterpret_cast<const SaveHost*>(
               &_SaveHost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SaveHost* other);
  friend void swap(SaveHost& a, SaveHost& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SaveHost* New() const final {
    return CreateMaybeMessage<SaveHost>(nullptr);
  }

  SaveHost* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SaveHost>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SaveHost& from);
  void MergeFrom(const SaveHost& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveHost* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string host = 2;
  bool has_host() const;
  void clear_host();
  static const int kHostFieldNumber = 2;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // required string user = 3;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 3;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // required string pass = 4;
  bool has_pass() const;
  void clear_pass();
  static const int kPassFieldNumber = 4;
  const ::std::string& pass() const;
  void set_pass(const ::std::string& value);
  #if LANG_CXX11
  void set_pass(::std::string&& value);
  #endif
  void set_pass(const char* value);
  void set_pass(const char* value, size_t size);
  ::std::string* mutable_pass();
  ::std::string* release_pass();
  void set_allocated_pass(::std::string* pass);

  // optional uint32 mode = 6;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 6;
  ::google::protobuf::uint32 mode() const;
  void set_mode(::google::protobuf::uint32 value);

  // optional uint32 port = 5 [default = 10000];
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 5;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SaveHost)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr pass_;
  ::google::protobuf::uint32 mode_;
  ::google::protobuf::uint32 port_;
  friend struct ::TableStruct_client5_5fsavefile_2eproto;
};
// -------------------------------------------------------------------

class SaveSAM final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SaveSAM) */ {
 public:
  SaveSAM();
  virtual ~SaveSAM();

  SaveSAM(const SaveSAM& from);

  inline SaveSAM& operator=(const SaveSAM& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SaveSAM(SaveSAM&& from) noexcept
    : SaveSAM() {
    *this = ::std::move(from);
  }

  inline SaveSAM& operator=(SaveSAM&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SaveSAM& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveSAM* internal_default_instance() {
    return reinterpret_cast<const SaveSAM*>(
               &_SaveSAM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SaveSAM* other);
  friend void swap(SaveSAM& a, SaveSAM& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SaveSAM* New() const final {
    return CreateMaybeMessage<SaveSAM>(nullptr);
  }

  SaveSAM* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SaveSAM>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SaveSAM& from);
  void MergeFrom(const SaveSAM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveSAM* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string host = 1 [default = "localhost"];
  bool has_host() const;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // optional string user = 2 [default = "root"];
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 2;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // optional string pass = 3;
  bool has_pass() const;
  void clear_pass();
  static const int kPassFieldNumber = 3;
  const ::std::string& pass() const;
  void set_pass(const ::std::string& value);
  #if LANG_CXX11
  void set_pass(::std::string&& value);
  #endif
  void set_pass(const char* value);
  void set_pass(const char* value, size_t size);
  ::std::string* mutable_pass();
  ::std::string* release_pass();
  void set_allocated_pass(::std::string* pass);

  // optional string db = 4 [default = "samdb"];
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 4;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional uint32 port = 5 [default = 3306];
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 5;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SaveSAM)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed<::std::string> _i_give_permission_to_break_this_code_default_host_;
  private:
  ::google::protobuf::internal::ArenaStringPtr host_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed<::std::string> _i_give_permission_to_break_this_code_default_user_;
  private:
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr pass_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed<::std::string> _i_give_permission_to_break_this_code_default_db_;
  private:
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::uint32 port_;
  friend struct ::TableStruct_client5_5fsavefile_2eproto;
};
// -------------------------------------------------------------------

class SaveMusicDB final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SaveMusicDB) */ {
 public:
  SaveMusicDB();
  virtual ~SaveMusicDB();

  SaveMusicDB(const SaveMusicDB& from);

  inline SaveMusicDB& operator=(const SaveMusicDB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SaveMusicDB(SaveMusicDB&& from) noexcept
    : SaveMusicDB() {
    *this = ::std::move(from);
  }

  inline SaveMusicDB& operator=(SaveMusicDB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SaveMusicDB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveMusicDB* internal_default_instance() {
    return reinterpret_cast<const SaveMusicDB*>(
               &_SaveMusicDB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SaveMusicDB* other);
  friend void swap(SaveMusicDB& a, SaveMusicDB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SaveMusicDB* New() const final {
    return CreateMaybeMessage<SaveMusicDB>(nullptr);
  }

  SaveMusicDB* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SaveMusicDB>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SaveMusicDB& from);
  void MergeFrom(const SaveMusicDB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveMusicDB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string folder = 1;
  bool has_folder() const;
  void clear_folder();
  static const int kFolderFieldNumber = 1;
  const ::std::string& folder() const;
  void set_folder(const ::std::string& value);
  #if LANG_CXX11
  void set_folder(::std::string&& value);
  #endif
  void set_folder(const char* value);
  void set_folder(const char* value, size_t size);
  ::std::string* mutable_folder();
  ::std::string* release_folder();
  void set_allocated_folder(::std::string* folder);

  // @@protoc_insertion_point(class_scope:SaveMusicDB)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr folder_;
  friend struct ::TableStruct_client5_5fsavefile_2eproto;
};
// -------------------------------------------------------------------

class ConfigFile final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ConfigFile) */ {
 public:
  ConfigFile();
  virtual ~ConfigFile();

  ConfigFile(const ConfigFile& from);

  inline ConfigFile& operator=(const ConfigFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigFile(ConfigFile&& from) noexcept
    : ConfigFile() {
    *this = ::std::move(from);
  }

  inline ConfigFile& operator=(ConfigFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ConfigFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigFile* internal_default_instance() {
    return reinterpret_cast<const ConfigFile*>(
               &_ConfigFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ConfigFile* other);
  friend void swap(ConfigFile& a, ConfigFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigFile* New() const final {
    return CreateMaybeMessage<ConfigFile>(nullptr);
  }

  ConfigFile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigFile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigFile& from);
  void MergeFrom(const ConfigFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SaveHost connections = 8;
  int connections_size() const;
  void clear_connections();
  static const int kConnectionsFieldNumber = 8;
  ::SaveHost* mutable_connections(int index);
  ::google::protobuf::RepeatedPtrField< ::SaveHost >*
      mutable_connections();
  const ::SaveHost& connections(int index) const;
  ::SaveHost* add_connections();
  const ::google::protobuf::RepeatedPtrField< ::SaveHost >&
      connections() const;

  // optional .SaveSAM sam = 6;
  bool has_sam() const;
  void clear_sam();
  static const int kSamFieldNumber = 6;
  const ::SaveSAM& sam() const;
  ::SaveSAM* release_sam();
  ::SaveSAM* mutable_sam();
  void set_allocated_sam(::SaveSAM* sam);

  // optional .SaveMusicDB musicdb = 7;
  bool has_musicdb() const;
  void clear_musicdb();
  static const int kMusicdbFieldNumber = 7;
  const ::SaveMusicDB& musicdb() const;
  ::SaveMusicDB* release_musicdb();
  ::SaveMusicDB* mutable_musicdb();
  void set_allocated_musicdb(::SaveMusicDB* musicdb);

  // optional int32 host_index = 2;
  bool has_host_index() const;
  void clear_host_index();
  static const int kHostIndexFieldNumber = 2;
  ::google::protobuf::int32 host_index() const;
  void set_host_index(::google::protobuf::int32 value);

  // optional bool connect_on_startup = 4;
  bool has_connect_on_startup() const;
  void clear_connect_on_startup();
  static const int kConnectOnStartupFieldNumber = 4;
  bool connect_on_startup() const;
  void set_connect_on_startup(bool value);

  // optional bool keep_on_top = 5;
  bool has_keep_on_top() const;
  void clear_keep_on_top();
  static const int kKeepOnTopFieldNumber = 5;
  bool keep_on_top() const;
  void set_keep_on_top(bool value);

  // optional bool beep_on_req = 3 [default = true];
  bool has_beep_on_req() const;
  void clear_beep_on_req();
  static const int kBeepOnReqFieldNumber = 3;
  bool beep_on_req() const;
  void set_beep_on_req(bool value);

  // @@protoc_insertion_point(class_scope:ConfigFile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SaveHost > connections_;
  ::SaveSAM* sam_;
  ::SaveMusicDB* musicdb_;
  ::google::protobuf::int32 host_index_;
  bool connect_on_startup_;
  bool keep_on_top_;
  bool beep_on_req_;
  friend struct ::TableStruct_client5_5fsavefile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SaveHost

// required string name = 1;
inline bool SaveHost::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveHost::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& SaveHost::name() const {
  // @@protoc_insertion_point(field_get:SaveHost.name)
  return name_.GetNoArena();
}
inline void SaveHost::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SaveHost.name)
}
#if LANG_CXX11
inline void SaveHost::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SaveHost.name)
}
#endif
inline void SaveHost::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SaveHost.name)
}
inline void SaveHost::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SaveHost.name)
}
inline ::std::string* SaveHost::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:SaveHost.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveHost::release_name() {
  // @@protoc_insertion_point(field_release:SaveHost.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveHost::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SaveHost.name)
}

// required string host = 2;
inline bool SaveHost::has_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SaveHost::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& SaveHost::host() const {
  // @@protoc_insertion_point(field_get:SaveHost.host)
  return host_.GetNoArena();
}
inline void SaveHost::set_host(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SaveHost.host)
}
#if LANG_CXX11
inline void SaveHost::set_host(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SaveHost.host)
}
#endif
inline void SaveHost::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SaveHost.host)
}
inline void SaveHost::set_host(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SaveHost.host)
}
inline ::std::string* SaveHost::mutable_host() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:SaveHost.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveHost::release_host() {
  // @@protoc_insertion_point(field_release:SaveHost.host)
  if (!has_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return host_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveHost::set_allocated_host(::std::string* host) {
  if (host != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:SaveHost.host)
}

// required string user = 3;
inline bool SaveHost::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SaveHost::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& SaveHost::user() const {
  // @@protoc_insertion_point(field_get:SaveHost.user)
  return user_.GetNoArena();
}
inline void SaveHost::set_user(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SaveHost.user)
}
#if LANG_CXX11
inline void SaveHost::set_user(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SaveHost.user)
}
#endif
inline void SaveHost::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SaveHost.user)
}
inline void SaveHost::set_user(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SaveHost.user)
}
inline ::std::string* SaveHost::mutable_user() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:SaveHost.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveHost::release_user() {
  // @@protoc_insertion_point(field_release:SaveHost.user)
  if (!has_user()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return user_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveHost::set_allocated_user(::std::string* user) {
  if (user != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:SaveHost.user)
}

// required string pass = 4;
inline bool SaveHost::has_pass() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SaveHost::clear_pass() {
  pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& SaveHost::pass() const {
  // @@protoc_insertion_point(field_get:SaveHost.pass)
  return pass_.GetNoArena();
}
inline void SaveHost::set_pass(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SaveHost.pass)
}
#if LANG_CXX11
inline void SaveHost::set_pass(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  pass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SaveHost.pass)
}
#endif
inline void SaveHost::set_pass(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SaveHost.pass)
}
inline void SaveHost::set_pass(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SaveHost.pass)
}
inline ::std::string* SaveHost::mutable_pass() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:SaveHost.pass)
  return pass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveHost::release_pass() {
  // @@protoc_insertion_point(field_release:SaveHost.pass)
  if (!has_pass()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return pass_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveHost::set_allocated_pass(::std::string* pass) {
  if (pass != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  pass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass);
  // @@protoc_insertion_point(field_set_allocated:SaveHost.pass)
}

// optional uint32 port = 5 [default = 10000];
inline bool SaveHost::has_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SaveHost::clear_port() {
  port_ = 10000u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 SaveHost::port() const {
  // @@protoc_insertion_point(field_get:SaveHost.port)
  return port_;
}
inline void SaveHost::set_port(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  port_ = value;
  // @@protoc_insertion_point(field_set:SaveHost.port)
}

// optional uint32 mode = 6;
inline bool SaveHost::has_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SaveHost::clear_mode() {
  mode_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 SaveHost::mode() const {
  // @@protoc_insertion_point(field_get:SaveHost.mode)
  return mode_;
}
inline void SaveHost::set_mode(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:SaveHost.mode)
}

// -------------------------------------------------------------------

// SaveSAM

// optional string host = 1 [default = "localhost"];
inline bool SaveSAM::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveSAM::clear_host() {
  host_.ClearToDefaultNoArena(&::SaveSAM::_i_give_permission_to_break_this_code_default_host_.get());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& SaveSAM::host() const {
  // @@protoc_insertion_point(field_get:SaveSAM.host)
  return host_.GetNoArena();
}
inline void SaveSAM::set_host(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(&::SaveSAM::_i_give_permission_to_break_this_code_default_host_.get(), value);
  // @@protoc_insertion_point(field_set:SaveSAM.host)
}
#if LANG_CXX11
inline void SaveSAM::set_host(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(
    &::SaveSAM::_i_give_permission_to_break_this_code_default_host_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SaveSAM.host)
}
#endif
inline void SaveSAM::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(&::SaveSAM::_i_give_permission_to_break_this_code_default_host_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SaveSAM.host)
}
inline void SaveSAM::set_host(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(&::SaveSAM::_i_give_permission_to_break_this_code_default_host_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SaveSAM.host)
}
inline ::std::string* SaveSAM::mutable_host() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:SaveSAM.host)
  return host_.MutableNoArena(&::SaveSAM::_i_give_permission_to_break_this_code_default_host_.get());
}
inline ::std::string* SaveSAM::release_host() {
  // @@protoc_insertion_point(field_release:SaveSAM.host)
  if (!has_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return host_.ReleaseNonDefaultNoArena(&::SaveSAM::_i_give_permission_to_break_this_code_default_host_.get());
}
inline void SaveSAM::set_allocated_host(::std::string* host) {
  if (host != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  host_.SetAllocatedNoArena(&::SaveSAM::_i_give_permission_to_break_this_code_default_host_.get(), host);
  // @@protoc_insertion_point(field_set_allocated:SaveSAM.host)
}

// optional string user = 2 [default = "root"];
inline bool SaveSAM::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SaveSAM::clear_user() {
  user_.ClearToDefaultNoArena(&::SaveSAM::_i_give_permission_to_break_this_code_default_user_.get());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& SaveSAM::user() const {
  // @@protoc_insertion_point(field_get:SaveSAM.user)
  return user_.GetNoArena();
}
inline void SaveSAM::set_user(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_.SetNoArena(&::SaveSAM::_i_give_permission_to_break_this_code_default_user_.get(), value);
  // @@protoc_insertion_point(field_set:SaveSAM.user)
}
#if LANG_CXX11
inline void SaveSAM::set_user(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_.SetNoArena(
    &::SaveSAM::_i_give_permission_to_break_this_code_default_user_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SaveSAM.user)
}
#endif
inline void SaveSAM::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_.SetNoArena(&::SaveSAM::_i_give_permission_to_break_this_code_default_user_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SaveSAM.user)
}
inline void SaveSAM::set_user(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_.SetNoArena(&::SaveSAM::_i_give_permission_to_break_this_code_default_user_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SaveSAM.user)
}
inline ::std::string* SaveSAM::mutable_user() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:SaveSAM.user)
  return user_.MutableNoArena(&::SaveSAM::_i_give_permission_to_break_this_code_default_user_.get());
}
inline ::std::string* SaveSAM::release_user() {
  // @@protoc_insertion_point(field_release:SaveSAM.user)
  if (!has_user()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_.ReleaseNonDefaultNoArena(&::SaveSAM::_i_give_permission_to_break_this_code_default_user_.get());
}
inline void SaveSAM::set_allocated_user(::std::string* user) {
  if (user != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_.SetAllocatedNoArena(&::SaveSAM::_i_give_permission_to_break_this_code_default_user_.get(), user);
  // @@protoc_insertion_point(field_set_allocated:SaveSAM.user)
}

// optional string pass = 3;
inline bool SaveSAM::has_pass() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SaveSAM::clear_pass() {
  pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& SaveSAM::pass() const {
  // @@protoc_insertion_point(field_get:SaveSAM.pass)
  return pass_.GetNoArena();
}
inline void SaveSAM::set_pass(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SaveSAM.pass)
}
#if LANG_CXX11
inline void SaveSAM::set_pass(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  pass_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SaveSAM.pass)
}
#endif
inline void SaveSAM::set_pass(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SaveSAM.pass)
}
inline void SaveSAM::set_pass(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SaveSAM.pass)
}
inline ::std::string* SaveSAM::mutable_pass() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:SaveSAM.pass)
  return pass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveSAM::release_pass() {
  // @@protoc_insertion_point(field_release:SaveSAM.pass)
  if (!has_pass()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return pass_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveSAM::set_allocated_pass(::std::string* pass) {
  if (pass != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  pass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass);
  // @@protoc_insertion_point(field_set_allocated:SaveSAM.pass)
}

// optional string db = 4 [default = "samdb"];
inline bool SaveSAM::has_db() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SaveSAM::clear_db() {
  db_.ClearToDefaultNoArena(&::SaveSAM::_i_give_permission_to_break_this_code_default_db_.get());
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::std::string& SaveSAM::db() const {
  // @@protoc_insertion_point(field_get:SaveSAM.db)
  return db_.GetNoArena();
}
inline void SaveSAM::set_db(const ::std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  db_.SetNoArena(&::SaveSAM::_i_give_permission_to_break_this_code_default_db_.get(), value);
  // @@protoc_insertion_point(field_set:SaveSAM.db)
}
#if LANG_CXX11
inline void SaveSAM::set_db(::std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  db_.SetNoArena(
    &::SaveSAM::_i_give_permission_to_break_this_code_default_db_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SaveSAM.db)
}
#endif
inline void SaveSAM::set_db(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  db_.SetNoArena(&::SaveSAM::_i_give_permission_to_break_this_code_default_db_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SaveSAM.db)
}
inline void SaveSAM::set_db(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  db_.SetNoArena(&::SaveSAM::_i_give_permission_to_break_this_code_default_db_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SaveSAM.db)
}
inline ::std::string* SaveSAM::mutable_db() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:SaveSAM.db)
  return db_.MutableNoArena(&::SaveSAM::_i_give_permission_to_break_this_code_default_db_.get());
}
inline ::std::string* SaveSAM::release_db() {
  // @@protoc_insertion_point(field_release:SaveSAM.db)
  if (!has_db()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return db_.ReleaseNonDefaultNoArena(&::SaveSAM::_i_give_permission_to_break_this_code_default_db_.get());
}
inline void SaveSAM::set_allocated_db(::std::string* db) {
  if (db != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  db_.SetAllocatedNoArena(&::SaveSAM::_i_give_permission_to_break_this_code_default_db_.get(), db);
  // @@protoc_insertion_point(field_set_allocated:SaveSAM.db)
}

// optional uint32 port = 5 [default = 3306];
inline bool SaveSAM::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SaveSAM::clear_port() {
  port_ = 3306u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 SaveSAM::port() const {
  // @@protoc_insertion_point(field_get:SaveSAM.port)
  return port_;
}
inline void SaveSAM::set_port(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  port_ = value;
  // @@protoc_insertion_point(field_set:SaveSAM.port)
}

// -------------------------------------------------------------------

// SaveMusicDB

// optional string folder = 1;
inline bool SaveMusicDB::has_folder() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveMusicDB::clear_folder() {
  folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& SaveMusicDB::folder() const {
  // @@protoc_insertion_point(field_get:SaveMusicDB.folder)
  return folder_.GetNoArena();
}
inline void SaveMusicDB::set_folder(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SaveMusicDB.folder)
}
#if LANG_CXX11
inline void SaveMusicDB::set_folder(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SaveMusicDB.folder)
}
#endif
inline void SaveMusicDB::set_folder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SaveMusicDB.folder)
}
inline void SaveMusicDB::set_folder(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SaveMusicDB.folder)
}
inline ::std::string* SaveMusicDB::mutable_folder() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:SaveMusicDB.folder)
  return folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveMusicDB::release_folder() {
  // @@protoc_insertion_point(field_release:SaveMusicDB.folder)
  if (!has_folder()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return folder_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveMusicDB::set_allocated_folder(::std::string* folder) {
  if (folder != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), folder);
  // @@protoc_insertion_point(field_set_allocated:SaveMusicDB.folder)
}

// -------------------------------------------------------------------

// ConfigFile

// optional int32 host_index = 2;
inline bool ConfigFile::has_host_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigFile::clear_host_index() {
  host_index_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 ConfigFile::host_index() const {
  // @@protoc_insertion_point(field_get:ConfigFile.host_index)
  return host_index_;
}
inline void ConfigFile::set_host_index(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  host_index_ = value;
  // @@protoc_insertion_point(field_set:ConfigFile.host_index)
}

// optional bool beep_on_req = 3 [default = true];
inline bool ConfigFile::has_beep_on_req() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigFile::clear_beep_on_req() {
  beep_on_req_ = true;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ConfigFile::beep_on_req() const {
  // @@protoc_insertion_point(field_get:ConfigFile.beep_on_req)
  return beep_on_req_;
}
inline void ConfigFile::set_beep_on_req(bool value) {
  _has_bits_[0] |= 0x00000020u;
  beep_on_req_ = value;
  // @@protoc_insertion_point(field_set:ConfigFile.beep_on_req)
}

// optional bool connect_on_startup = 4;
inline bool ConfigFile::has_connect_on_startup() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigFile::clear_connect_on_startup() {
  connect_on_startup_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ConfigFile::connect_on_startup() const {
  // @@protoc_insertion_point(field_get:ConfigFile.connect_on_startup)
  return connect_on_startup_;
}
inline void ConfigFile::set_connect_on_startup(bool value) {
  _has_bits_[0] |= 0x00000008u;
  connect_on_startup_ = value;
  // @@protoc_insertion_point(field_set:ConfigFile.connect_on_startup)
}

// optional bool keep_on_top = 5;
inline bool ConfigFile::has_keep_on_top() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigFile::clear_keep_on_top() {
  keep_on_top_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ConfigFile::keep_on_top() const {
  // @@protoc_insertion_point(field_get:ConfigFile.keep_on_top)
  return keep_on_top_;
}
inline void ConfigFile::set_keep_on_top(bool value) {
  _has_bits_[0] |= 0x00000010u;
  keep_on_top_ = value;
  // @@protoc_insertion_point(field_set:ConfigFile.keep_on_top)
}

// optional .SaveSAM sam = 6;
inline bool ConfigFile::has_sam() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigFile::clear_sam() {
  if (sam_ != nullptr) sam_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::SaveSAM& ConfigFile::sam() const {
  const ::SaveSAM* p = sam_;
  // @@protoc_insertion_point(field_get:ConfigFile.sam)
  return p != nullptr ? *p : *reinterpret_cast<const ::SaveSAM*>(
      &::_SaveSAM_default_instance_);
}
inline ::SaveSAM* ConfigFile::release_sam() {
  // @@protoc_insertion_point(field_release:ConfigFile.sam)
  _has_bits_[0] &= ~0x00000001u;
  ::SaveSAM* temp = sam_;
  sam_ = nullptr;
  return temp;
}
inline ::SaveSAM* ConfigFile::mutable_sam() {
  _has_bits_[0] |= 0x00000001u;
  if (sam_ == nullptr) {
    auto* p = CreateMaybeMessage<::SaveSAM>(GetArenaNoVirtual());
    sam_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ConfigFile.sam)
  return sam_;
}
inline void ConfigFile::set_allocated_sam(::SaveSAM* sam) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sam_;
  }
  if (sam) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sam = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sam, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sam_ = sam;
  // @@protoc_insertion_point(field_set_allocated:ConfigFile.sam)
}

// optional .SaveMusicDB musicdb = 7;
inline bool ConfigFile::has_musicdb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigFile::clear_musicdb() {
  if (musicdb_ != nullptr) musicdb_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::SaveMusicDB& ConfigFile::musicdb() const {
  const ::SaveMusicDB* p = musicdb_;
  // @@protoc_insertion_point(field_get:ConfigFile.musicdb)
  return p != nullptr ? *p : *reinterpret_cast<const ::SaveMusicDB*>(
      &::_SaveMusicDB_default_instance_);
}
inline ::SaveMusicDB* ConfigFile::release_musicdb() {
  // @@protoc_insertion_point(field_release:ConfigFile.musicdb)
  _has_bits_[0] &= ~0x00000002u;
  ::SaveMusicDB* temp = musicdb_;
  musicdb_ = nullptr;
  return temp;
}
inline ::SaveMusicDB* ConfigFile::mutable_musicdb() {
  _has_bits_[0] |= 0x00000002u;
  if (musicdb_ == nullptr) {
    auto* p = CreateMaybeMessage<::SaveMusicDB>(GetArenaNoVirtual());
    musicdb_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ConfigFile.musicdb)
  return musicdb_;
}
inline void ConfigFile::set_allocated_musicdb(::SaveMusicDB* musicdb) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete musicdb_;
  }
  if (musicdb) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      musicdb = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, musicdb, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  musicdb_ = musicdb;
  // @@protoc_insertion_point(field_set_allocated:ConfigFile.musicdb)
}

// repeated .SaveHost connections = 8;
inline int ConfigFile::connections_size() const {
  return connections_.size();
}
inline void ConfigFile::clear_connections() {
  connections_.Clear();
}
inline ::SaveHost* ConfigFile::mutable_connections(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigFile.connections)
  return connections_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::SaveHost >*
ConfigFile::mutable_connections() {
  // @@protoc_insertion_point(field_mutable_list:ConfigFile.connections)
  return &connections_;
}
inline const ::SaveHost& ConfigFile::connections(int index) const {
  // @@protoc_insertion_point(field_get:ConfigFile.connections)
  return connections_.Get(index);
}
inline ::SaveHost* ConfigFile::add_connections() {
  // @@protoc_insertion_point(field_add:ConfigFile.connections)
  return connections_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SaveHost >&
ConfigFile::connections() const {
  // @@protoc_insertion_point(field_list:ConfigFile.connections)
  return connections_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_client5_5fsavefile_2eproto
